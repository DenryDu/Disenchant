// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220929.3

#include "pch.h"
#include "winrt/base.h"
void* winrt_make_DisenchantMusicPlayer_AlbumlistPage();
void* winrt_make_DisenchantMusicPlayer_ArtistlistPage();
void* winrt_make_DisenchantMusicPlayer_MainWindow();
void* winrt_make_DisenchantMusicPlayer_PlaylistsPage();
void* winrt_make_DisenchantMusicPlayer_SettingsPage();
void* winrt_make_DisenchantMusicPlayer_SonglistItem();
void* winrt_make_DisenchantMusicPlayer_SonglistPage();
void* winrt_make_DisenchantMusicPlayer_StatisticPage();
void* winrt_make_DisenchantMusicPlayer_XamlMetaDataProvider();

bool __stdcall winrt_can_unload_now() noexcept
{
    if (winrt::get_module_lock())
    {
        return false;
    }

    winrt::clear_factory_cache();
    return true;
}

void* __stdcall winrt_get_activation_factory([[maybe_unused]] std::wstring_view const& name)
{
    auto requal = [](std::wstring_view const& left, std::wstring_view const& right) noexcept
    {
        return std::equal(left.rbegin(), left.rend(), right.rbegin(), right.rend());
    };

    if (requal(name, L"DisenchantMusicPlayer.AlbumlistPage"))
    {
        return winrt_make_DisenchantMusicPlayer_AlbumlistPage();
    }

    if (requal(name, L"DisenchantMusicPlayer.ArtistlistPage"))
    {
        return winrt_make_DisenchantMusicPlayer_ArtistlistPage();
    }

    if (requal(name, L"DisenchantMusicPlayer.MainWindow"))
    {
        return winrt_make_DisenchantMusicPlayer_MainWindow();
    }

    if (requal(name, L"DisenchantMusicPlayer.PlaylistsPage"))
    {
        return winrt_make_DisenchantMusicPlayer_PlaylistsPage();
    }

    if (requal(name, L"DisenchantMusicPlayer.SettingsPage"))
    {
        return winrt_make_DisenchantMusicPlayer_SettingsPage();
    }

    if (requal(name, L"DisenchantMusicPlayer.SonglistItem"))
    {
        return winrt_make_DisenchantMusicPlayer_SonglistItem();
    }

    if (requal(name, L"DisenchantMusicPlayer.SonglistPage"))
    {
        return winrt_make_DisenchantMusicPlayer_SonglistPage();
    }

    if (requal(name, L"DisenchantMusicPlayer.StatisticPage"))
    {
        return winrt_make_DisenchantMusicPlayer_StatisticPage();
    }

    if (requal(name, L"DisenchantMusicPlayer.XamlMetaDataProvider"))
    {
        return winrt_make_DisenchantMusicPlayer_XamlMetaDataProvider();
    }

    return nullptr;
}

int32_t __stdcall WINRT_CanUnloadNow() noexcept
{
#ifdef _WRL_MODULE_H_
    if (!::Microsoft::WRL::Module<::Microsoft::WRL::InProc>::GetModule().Terminate())
    {
        return 1;
    }
#endif

    return winrt_can_unload_now() ? 0 : 1;
}

int32_t __stdcall WINRT_GetActivationFactory(void* classId, void** factory) noexcept try
{
    std::wstring_view const name{ *reinterpret_cast<winrt::hstring*>(&classId) };
    *factory = winrt_get_activation_factory(name);

    if (*factory)
    {
        return 0;
    }

#ifdef _WRL_MODULE_H_
    return ::Microsoft::WRL::Module<::Microsoft::WRL::InProc>::GetModule().GetActivationFactory(static_cast<HSTRING>(classId), reinterpret_cast<::IActivationFactory**>(factory));
#else
    return winrt::hresult_class_not_available(name).to_abi();
#endif
}
catch (...) { return winrt::to_hresult(); }
