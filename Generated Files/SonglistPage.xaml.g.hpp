//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "SonglistPage.xaml.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::DisenchantMusicPlayer::implementation
{
    using Application = ::winrt::Microsoft::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Microsoft::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Microsoft::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Microsoft::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Microsoft::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Microsoft::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Microsoft::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void SonglistPageT<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            ::winrt::Windows::Foundation::Uri resourceLocator{ L"ms-appx:///SonglistPage.xaml" };
            ::winrt::Microsoft::UI::Xaml::Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename ... I>
    void SonglistPageT<D, I...>::Connect(int32_t connectionId, IInspectable const& target)
    {
        switch (connectionId)
        {
        case 2:
            {
                auto targetElement = target.as<::winrt::Microsoft::UI::Xaml::Controls::ListView>();
                this->SonglistView(targetElement);
            }
            break;
        }
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void SonglistPageT<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void SonglistPageT<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector SonglistPageT<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::winrt::DisenchantMusicPlayer::implementation::XamlBindings> bindings;
        switch (connectionId)
        {
            case 4: // SonglistPage.xaml line 16
                {
                    auto element4 = target.as<::winrt::Microsoft::UI::Xaml::Controls::Grid>();
                    auto objBindings = std::make_unique<SonglistPage_obj4_Bindings>();
                    objBindings->SetDataRoot(element4.DataContext());
                    bindings = ::winrt::make_self<::winrt::DisenchantMusicPlayer::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element4);
                    DataTemplate::SetExtensionInstance(element4, bindings.as<::winrt::Microsoft::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element4, bindings.as<::winrt::Microsoft::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Microsoft::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    template <typename D, typename ... I>
    struct SonglistPageT<D, I...>::SonglistPage_obj4_Bindings
        : public ::winrt::DisenchantMusicPlayer::implementation::ReferenceTypeXamlBindings<::winrt::DisenchantMusicPlayer::SonglistItem, ::winrt::DisenchantMusicPlayer::implementation::XamlBindingTrackingBase>
{
        SonglistPage_obj4_Bindings()
        {
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 4: // SonglistPage.xaml line 16
                {
                    auto targetElement = target.as<::winrt::Microsoft::UI::Xaml::Controls::Grid>();
                    obj4 = targetElement;
                }
                break;
            case 5: // SonglistPage.xaml line 25
                {
                    auto targetElement = target.as<::winrt::Microsoft::UI::Xaml::Controls::TextBlock>();
                    obj5 = targetElement;
                }
                break;
            case 6: // SonglistPage.xaml line 26
                {
                    auto targetElement = target.as<::winrt::Microsoft::UI::Xaml::Controls::TextBlock>();
                    obj6 = targetElement;
                }
                break;
            case 7: // SonglistPage.xaml line 22
                {
                    auto targetElement = target.as<::winrt::Microsoft::UI::Xaml::Controls::Image>();
                    obj7 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj4.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::DisenchantMusicPlayer::SonglistItem>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Microsoft::UI::Xaml::Controls::Grid> obj4;
        ::winrt::Microsoft::UI::Xaml::Controls::TextBlock obj5 { nullptr };
        ::winrt::Microsoft::UI::Xaml::Controls::TextBlock obj6 { nullptr };
        ::winrt::Microsoft::UI::Xaml::Controls::Image obj7 { nullptr };

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::DisenchantMusicPlayer::SonglistItem obj, int32_t phase)
        {
            if (obj)
            {
                if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                {
                    Update_SongName(obj.SongName(), phase);
                    Update_AlbumName(obj.AlbumName(), phase);
                    Update_CoverPath(obj.CoverPath(), phase);
                }
            }
        }

        void Update_SongName(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // SonglistPage.xaml line 25
                Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(obj5, obj);
            }
        }

        void Update_AlbumName(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // SonglistPage.xaml line 26
                Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(obj6, obj);
            }
        }

        void Update_CoverPath(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // SonglistPage.xaml line 22
                Set_Microsoft_UI_Xaml_Controls_Image_Source(obj7, ::winrt::Microsoft::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Microsoft::UI::Xaml::Media::ImageSource>(), ::winrt::box_value(::winrt::hstring(obj))).as<::winrt::Microsoft::UI::Xaml::Media::ImageSource>(), std::nullopt);
            }
        }

        static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(::winrt::Microsoft::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }

        static void Set_Microsoft_UI_Xaml_Controls_Image_Source(::winrt::Microsoft::UI::Xaml::Controls::Image const& obj, ::winrt::Microsoft::UI::Xaml::Media::ImageSource value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Microsoft::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Microsoft::UI::Xaml::Media::ImageSource>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Microsoft::UI::Xaml::Media::ImageSource>();
            }
            obj.Source(value);
        }
    }; 

    template struct SonglistPageT<struct SonglistPage>;
}


#pragma warning(pop)


