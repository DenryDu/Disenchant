//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include <memory>

#include "XamlTypeInfo.xaml.g.h"

#include "SonglistItem.h"
#include "AlbumlistPage.xaml.h"
#include "ArtistlistPage.xaml.h"
#include "App.xaml.h"
#include "MainWindow.xaml.h"
#include "PlaylistsPage.xaml.h"
#include "SettingsPage.xaml.h"
#include "SonglistPage.xaml.h"
#include "StatisticPage.xaml.h"
#include "XamlBindingInfo.xaml.g.hpp"
#include "AlbumlistPage.xaml.g.hpp"
#include "ArtistlistPage.xaml.g.hpp"
#include "App.xaml.g.hpp"
#include "MainWindow.xaml.g.hpp"
#include "PlaylistsPage.xaml.g.hpp"
#include "SettingsPage.xaml.g.hpp"
#include "SonglistPage.xaml.g.hpp"
#include "StatisticPage.xaml.g.hpp"

namespace winrt::DisenchantMusicPlayer::implementation
{
using IXamlMember = ::winrt::Microsoft::UI::Xaml::Markup::IXamlMember;
using IXamlType = ::winrt::Microsoft::UI::Xaml::Markup::IXamlType;
using TypeKind = ::winrt::Windows::UI::Xaml::Interop::TypeKind;

template <typename T>
::winrt::Windows::Foundation::IInspectable ActivateType()
{
    return T();
}

template <typename T>
::winrt::Windows::Foundation::IInspectable ActivateLocalType()
{
    return ::winrt::make<T>();
}

template<typename TInstance, typename TItem>
void CollectionAdd(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& item)
{
    instance.as<TInstance>().Append(::winrt::unbox_value<TItem>(item));
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(
    ::winrt::Windows::Foundation::IInspectable const& instance,
    ::winrt::Windows::Foundation::IInspectable const& key,
    ::winrt::Windows::Foundation::IInspectable const& item)
{
    instance.as<TInstance>().Insert(::winrt::unbox_value<TKey>(key), ::winrt::unbox_value<TItem>(item));
}

template<typename T>
::winrt::Windows::Foundation::IInspectable FromStringConverter(
    XamlUserType const& userType, 
    ::winrt::hstring const& input)
{
    return ::winrt::box_value(static_cast<T>(userType.CreateEnumUIntFromString(input)));
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_UseCompactResources(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().UseCompactResources());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_MyProperty(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().MyProperty());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_PaneDisplayMode(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().PaneDisplayMode());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsSettingsVisible(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsSettingsVisible());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_OpenPaneLength(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().OpenPaneLength());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsTitleBarAutoPaddingEnabled(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsTitleBarAutoPaddingEnabled());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsPaneToggleButtonVisible(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsPaneToggleButtonVisible());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsPaneOpen(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsPaneOpen());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_ExpandedModeThresholdWidth(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().ExpandedModeThresholdWidth());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_CompactPaneLength(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().CompactPaneLength());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_CompactModeThresholdWidth(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().CompactModeThresholdWidth());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_AlwaysShowHeader(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().AlwaysShowHeader());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_DisplayMode(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().DisplayMode());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_ShoulderNavigationEnabled(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().ShoulderNavigationEnabled());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_SelectionFollowsFocus(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().SelectionFollowsFocus());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_OverflowLabelMode(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().OverflowLabelMode());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsPaneVisible(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsPaneVisible());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsBackEnabled(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsBackEnabled());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsBackButtonVisible(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsBackButtonVisible());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_SelectsOnInvoked(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().SelectsOnInvoked());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsExpanded(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsExpanded());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsChildSelected(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsChildSelected());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_HasUnrealizedChildren(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().HasUnrealizedChildren());
}

template<typename TDeclaringType, typename TValue>
::winrt::Windows::Foundation::IInspectable GetValueTypeMember_IsSelected(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value<TValue>(instance.as<TDeclaringType>().IsSelected());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeStringMember_PaneTitle(::winrt::Windows::Foundation::IInspectable const& instance)
{
   return ::winrt::box_value(::winrt::Windows::Foundation::PropertyValue::CreateString(instance.as<T>().PaneTitle()));
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_SelectedItem(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().SelectedItem());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_MenuItems(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().MenuItems());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_FooterMenuItems(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().FooterMenuItems());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_PaneToggleButtonStyle(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().PaneToggleButtonStyle());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_PaneFooter(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().PaneFooter());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_MenuItemsSource(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().MenuItemsSource());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_MenuItemContainerStyleSelector(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().MenuItemContainerStyleSelector());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_MenuItemContainerStyle(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().MenuItemContainerStyle());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_HeaderTemplate(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().HeaderTemplate());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_Header(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().Header());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_FooterMenuItemsSource(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().FooterMenuItemsSource());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_MenuItemTemplateSelector(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().MenuItemTemplateSelector());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_MenuItemTemplate(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().MenuItemTemplate());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_AutoSuggestBox(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().AutoSuggestBox());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_SettingsItem(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().SettingsItem());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_PaneHeader(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().PaneHeader());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_PaneCustomContent(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().PaneCustomContent());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_ContentOverlay(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().ContentOverlay());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_TemplateSettings(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().TemplateSettings());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_Icon(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().Icon());
}

template <typename T>
::winrt::Windows::Foundation::IInspectable GetReferenceTypeMember_InfoBadge(::winrt::Windows::Foundation::IInspectable const& instance)
{
    return ::winrt::box_value(instance.as<T>().InfoBadge());
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_PaneDisplayMode(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().PaneDisplayMode(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_ShoulderNavigationEnabled(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().ShoulderNavigationEnabled(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_SelectionFollowsFocus(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().SelectionFollowsFocus(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_OverflowLabelMode(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().OverflowLabelMode(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetEnumMember_IsBackButtonVisible(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsBackButtonVisible(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_UseCompactResources(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().UseCompactResources(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_MyProperty(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().MyProperty(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsSettingsVisible(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsSettingsVisible(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_OpenPaneLength(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().OpenPaneLength(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsTitleBarAutoPaddingEnabled(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsTitleBarAutoPaddingEnabled(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsPaneToggleButtonVisible(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsPaneToggleButtonVisible(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsPaneOpen(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsPaneOpen(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_ExpandedModeThresholdWidth(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().ExpandedModeThresholdWidth(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_CompactPaneLength(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().CompactPaneLength(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_CompactModeThresholdWidth(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().CompactModeThresholdWidth(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_AlwaysShowHeader(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().AlwaysShowHeader(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsPaneVisible(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsPaneVisible(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsBackEnabled(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsBackEnabled(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_SelectsOnInvoked(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().SelectsOnInvoked(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsExpanded(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsExpanded(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsChildSelected(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsChildSelected(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_HasUnrealizedChildren(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().HasUnrealizedChildren(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsSelected(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().IsSelected(::winrt::unbox_value<TValue>(value));
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeStringMember_PaneTitle(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    return instance.as<TDeclaringType>().PaneTitle(::winrt::unbox_value<::winrt::hstring>(value));
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_SelectedItem(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().SelectedItem(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_PaneToggleButtonStyle(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().PaneToggleButtonStyle(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_PaneFooter(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().PaneFooter(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_MenuItemsSource(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().MenuItemsSource(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_MenuItemContainerStyleSelector(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().MenuItemContainerStyleSelector(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_MenuItemContainerStyle(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().MenuItemContainerStyle(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_HeaderTemplate(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().HeaderTemplate(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Header(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().Header(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_FooterMenuItemsSource(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().FooterMenuItemsSource(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_MenuItemTemplateSelector(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().MenuItemTemplateSelector(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_MenuItemTemplate(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().MenuItemTemplate(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_AutoSuggestBox(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().AutoSuggestBox(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_PaneHeader(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().PaneHeader(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_PaneCustomContent(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().PaneCustomContent(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ContentOverlay(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().ContentOverlay(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Icon(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().Icon(value.as<TValue>());
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_InfoBadge(
    ::winrt::Windows::Foundation::IInspectable const& instance, 
    ::winrt::Windows::Foundation::IInspectable const& value)
{
    instance.as<TDeclaringType>().InfoBadge(value.as<TValue>());
}

enum TypeInfo_Flags
{
    TypeInfo_Flags_None                 = 0x00,
    TypeInfo_Flags_IsLocalType          = 0x01,
    TypeInfo_Flags_IsSystemType         = 0x02,
    TypeInfo_Flags_IsReturnTypeStub     = 0x04,
    TypeInfo_Flags_IsBindable           = 0x08,
    TypeInfo_Flags_IsMarkupExtension    = 0x10, 
};

struct TypeInfo
{
    const wchar_t* typeName{nullptr};
    const wchar_t* contentPropertyName{nullptr};
    ::winrt::Windows::Foundation::IInspectable (*activator)();
    void (*collectionAdd)(::winrt::Windows::Foundation::IInspectable const&, ::winrt::Windows::Foundation::IInspectable const&);
    void (*dictionaryAdd)(::winrt::Windows::Foundation::IInspectable const&, ::winrt::Windows::Foundation::IInspectable const&, ::winrt::Windows::Foundation::IInspectable const&);
    ::winrt::Windows::Foundation::IInspectable (*fromStringConverter)(XamlUserType const&, ::winrt::hstring const& );
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    int     createFromStringIndex;
    TypeKind kindOfType;
    unsigned int flags;
    int boxedTypeIndex;
};


const TypeInfo TypeInfos[] = 
{
    //   0
    L"Int32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   1
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   2
    L"Double", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   3
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   4
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   5
    L"System.Enum", L"",
    nullptr, nullptr, nullptr, nullptr,
    6, // System.ValueType
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //   6
    L"System.ValueType", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //   7
    L"Microsoft.UI.Xaml.Style", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   8
    L"Microsoft.UI.Xaml.Window", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //   9
    L"Microsoft.UI.Xaml.UIElement", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  10
    L"Microsoft.UI.Xaml.DataTemplate", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  11
    L"Microsoft.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  12
    L"DisenchantMusicPlayer.MainWindow", L"",
    &ActivateLocalType<::winrt::DisenchantMusicPlayer::implementation::MainWindow>, nullptr, nullptr, nullptr,
    8, // Microsoft.UI.Xaml.Window
    0, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  13
    L"Microsoft.UI.Xaml.DependencyObject", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  14
    L"Microsoft.UI.Xaml.Controls.Control", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    1, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  15
    L"DisenchantMusicPlayer.SettingsPage", L"",
    &ActivateLocalType<::winrt::DisenchantMusicPlayer::implementation::SettingsPage>, nullptr, nullptr, nullptr,
    11, // Microsoft.UI.Xaml.Controls.Page
    1, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  16
    L"DisenchantMusicPlayer.SonglistPage", L"",
    &ActivateLocalType<::winrt::DisenchantMusicPlayer::implementation::SonglistPage>, nullptr, nullptr, nullptr,
    11, // Microsoft.UI.Xaml.Controls.Page
    2, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  17
    L"DisenchantMusicPlayer.AlbumlistPage", L"",
    &ActivateLocalType<::winrt::DisenchantMusicPlayer::implementation::AlbumlistPage>, nullptr, nullptr, nullptr,
    11, // Microsoft.UI.Xaml.Controls.Page
    3, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  18
    L"DisenchantMusicPlayer.PlaylistsPage", L"",
    &ActivateLocalType<::winrt::DisenchantMusicPlayer::implementation::PlaylistsPage>, nullptr, nullptr, nullptr,
    11, // Microsoft.UI.Xaml.Controls.Page
    4, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  19
    L"DisenchantMusicPlayer.StatisticPage", L"",
    &ActivateLocalType<::winrt::DisenchantMusicPlayer::implementation::StatisticPage>, nullptr, nullptr, nullptr,
    11, // Microsoft.UI.Xaml.Controls.Page
    5, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  20
    L"Microsoft.UI.Xaml.ResourceDictionary", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    6, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  21
    L"DisenchantMusicPlayer.ArtistlistPage", L"",
    &ActivateLocalType<::winrt::DisenchantMusicPlayer::implementation::ArtistlistPage>, nullptr, nullptr, nullptr,
    11, // Microsoft.UI.Xaml.Controls.Page
    6, 0, -1, TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    -1,
    //  22
    L"Microsoft.UI.Xaml.Controls.InfoBadge", L"",
    nullptr, nullptr, nullptr, nullptr,
    14, // Microsoft.UI.Xaml.Controls.Control
    7, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    -1,
    //  23
    L"Microsoft.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    7, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  24
    L"Microsoft.UI.Xaml.Controls.IconElement", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    7, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  25
    L"Microsoft.UI.Xaml.Controls.StyleSelector", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    7, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  26
    L"Microsoft.UI.Xaml.Controls.NavigationView", L"",
    &ActivateType<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>, nullptr, nullptr, nullptr,
    27, // Microsoft.UI.Xaml.Controls.ContentControl
    7, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  27
    L"Microsoft.UI.Xaml.Controls.ContentControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    44, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  28
    L"Microsoft.UI.Xaml.Controls.AutoSuggestBox", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    44, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  29
    L"Microsoft.UI.Xaml.Controls.NavigationViewItem", L"",
    &ActivateType<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem>, nullptr, nullptr, nullptr,
    33, // Microsoft.UI.Xaml.Controls.NavigationViewItemBase
    44, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  30
    L"Microsoft.UI.Xaml.Controls.DataTemplateSelector", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    53, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    -1,
    //  31
    L"Microsoft.UI.Xaml.Controls.XamlControlsResources", L"",
    &ActivateType<::winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources>, nullptr, &DictionaryAdd<::winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources, ::winrt::Windows::Foundation::IInspectable, ::winrt::Windows::Foundation::IInspectable>, nullptr,
    20, // Microsoft.UI.Xaml.ResourceDictionary
    53, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  32
    L"Windows.Foundation.Collections.IVector`1<Object>", L"",
    nullptr, &CollectionAdd<::winrt::Windows::Foundation::Collections::IVector<::winrt::Windows::Foundation::IInspectable>, ::winrt::Windows::Foundation::IInspectable>, nullptr, nullptr,
    -1,
    54, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    -1,
    //  33
    L"Microsoft.UI.Xaml.Controls.NavigationViewItemBase", L"",
    nullptr, nullptr, nullptr, nullptr,
    27, // Microsoft.UI.Xaml.Controls.ContentControl
    54, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  34
    L"Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode>,
    5, // System.Enum
    55, 0, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  35
    L"Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode>,
    5, // System.Enum
    55, 3, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  36
    L"Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings", L"",
    nullptr, nullptr, nullptr, nullptr,
    13, // Microsoft.UI.Xaml.DependencyObject
    55, 8, -1, TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    -1,
    //  37
    L"Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode>,
    5, // System.Enum
    55, 8, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  38
    L"Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible>,
    5, // System.Enum
    55, 10, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  39
    L"Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>,
    5, // System.Enum
    55, 13, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  40
    L"Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled", L"",
    nullptr, nullptr, nullptr, &FromStringConverter<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>,
    5, // System.Enum
    55, 15, -1, TypeKind::Metadata,
    TypeInfo_Flags_None,
    -1,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    55, 18, -1, TypeKind::Custom,
    TypeInfo_Flags_None,
};

constexpr uint32_t TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      1,   //   6
      4,   //   7
      5,   //   8
      5,   //   9
      5,   //  10
      5,   //  11
      6,   //  12
      6,   //  13
      6,   //  14
      6,   //  15
      6,   //  16
      7,   //  17
      7,   //  18
      7,   //  19
      7,   //  20
      7,   //  21
      7,   //  22
      7,   //  23
      8,   //  24
      9,   //  25
      9,   //  26
      9,   //  27
     10,   //  28
     10,   //  29
     10,   //  30
     11,   //  31
     12,   //  32
     13,   //  33
     13,   //  34
     17,   //  35
     20,   //  36
     23,   //  37
     23,   //  38
     25,   //  39
     25,   //  40
     26,   //  41
     29,   //  42
     29,   //  43
     29,   //  44
     29,   //  45
     30,   //  46
     30,   //  47
     31,   //  48
     33,   //  49
     34,   //  50
     34,   //  51
     34,   //  52
     35,   //  53
     35,   //  54
     35,   //  55
     35,   //  56
     36,   //  57
     37,   //  58
     39,   //  59
     39,   //  60
     39,   //  61
     39,   //  62
     40,   //  63
     40,   //  64
     40,   //  65
     40,   //  66
     41,   //  67
};

struct EnumValueInfo
{
    const wchar_t* name{nullptr};
    int eValue;
};

const EnumValueInfo EnumValues[] =
{ 
    L"Minimal", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode::Minimal),
    L"Compact", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode::Compact),
    L"Expanded", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode::Expanded),
    L"Auto", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode::Auto),
    L"Left", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode::Left),
    L"Top", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode::Top),
    L"LeftCompact", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode::LeftCompact),
    L"LeftMinimal", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode::LeftMinimal),
    L"MoreLabel", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode::MoreLabel),
    L"NoLabel", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode::NoLabel),
    L"Collapsed", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible::Collapsed),
    L"Visible", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible::Visible),
    L"Auto", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible::Auto),
    L"Disabled", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus::Disabled),
    L"Enabled", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus::Enabled),
    L"WhenSelectionFollowsFocus", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled::WhenSelectionFollowsFocus),
    L"Always", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled::Always),
    L"Never", static_cast<int>(::winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled::Never),
};

struct MemberInfo 
{
    const wchar_t* shortName{nullptr};
    ::winrt::Windows::Foundation::IInspectable (*getter)(::winrt::Windows::Foundation::IInspectable const&);
    void (*setter)(::winrt::Windows::Foundation::IInspectable const&, ::winrt::Windows::Foundation::IInspectable const&);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - DisenchantMusicPlayer.MainWindow.MyProperty
    L"MyProperty",
    &GetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::MainWindow, int32_t>,
    &SetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::MainWindow, int32_t>,
    0, // Int32
    -1,
    false, false, false,
    //   1 - DisenchantMusicPlayer.SettingsPage.MyProperty
    L"MyProperty",
    &GetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::SettingsPage, int32_t>,
    &SetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::SettingsPage, int32_t>,
    0, // Int32
    -1,
    false, false, false,
    //   2 - DisenchantMusicPlayer.SonglistPage.MyProperty
    L"MyProperty",
    &GetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::SonglistPage, int32_t>,
    &SetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::SonglistPage, int32_t>,
    0, // Int32
    -1,
    false, false, false,
    //   3 - DisenchantMusicPlayer.AlbumlistPage.MyProperty
    L"MyProperty",
    &GetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::AlbumlistPage, int32_t>,
    &SetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::AlbumlistPage, int32_t>,
    0, // Int32
    -1,
    false, false, false,
    //   4 - DisenchantMusicPlayer.PlaylistsPage.MyProperty
    L"MyProperty",
    &GetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::PlaylistsPage, int32_t>,
    &SetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::PlaylistsPage, int32_t>,
    0, // Int32
    -1,
    false, false, false,
    //   5 - DisenchantMusicPlayer.StatisticPage.MyProperty
    L"MyProperty",
    &GetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::StatisticPage, int32_t>,
    &SetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::StatisticPage, int32_t>,
    0, // Int32
    -1,
    false, false, false,
    //   6 - DisenchantMusicPlayer.ArtistlistPage.MyProperty
    L"MyProperty",
    &GetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::ArtistlistPage, int32_t>,
    &SetValueTypeMember_MyProperty<::winrt::DisenchantMusicPlayer::ArtistlistPage, int32_t>,
    0, // Int32
    -1,
    false, false, false,
    //   7 - Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode
    L"PaneDisplayMode",
    &GetValueTypeMember_PaneDisplayMode<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode>,
    &SetEnumMember_PaneDisplayMode<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode>,
    35, // Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode
    -1,
    false, true,  false,
    //   8 - Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible
    L"IsSettingsVisible",
    &GetValueTypeMember_IsSettingsVisible<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    &SetValueTypeMember_IsSettingsVisible<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //   9 - Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem
    L"SelectedItem",
    &GetReferenceTypeMember_SelectedItem<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_SelectedItem<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //  10 - Microsoft.UI.Xaml.Controls.NavigationView.MenuItems
    L"MenuItems",
    &GetReferenceTypeMember_MenuItems<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    nullptr,
    32, // Windows.Foundation.Collections.IVector`1<Object>
    -1,
    true,  true,  false,
    //  11 - Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems
    L"FooterMenuItems",
    &GetReferenceTypeMember_FooterMenuItems<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    nullptr,
    32, // Windows.Foundation.Collections.IVector`1<Object>
    -1,
    true,  true,  false,
    //  12 - Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle
    L"PaneToggleButtonStyle",
    &GetReferenceTypeMember_PaneToggleButtonStyle<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_PaneToggleButtonStyle<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Style>,
    7, // Microsoft.UI.Xaml.Style
    -1,
    false, true,  false,
    //  13 - Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter
    L"PaneFooter",
    &GetReferenceTypeMember_PaneFooter<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_PaneFooter<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::UIElement>,
    9, // Microsoft.UI.Xaml.UIElement
    -1,
    false, true,  false,
    //  14 - Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength
    L"OpenPaneLength",
    &GetValueTypeMember_OpenPaneLength<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, double>,
    &SetValueTypeMember_OpenPaneLength<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, double>,
    2, // Double
    -1,
    false, true,  false,
    //  15 - Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource
    L"MenuItemsSource",
    &GetReferenceTypeMember_MenuItemsSource<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_MenuItemsSource<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //  16 - Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector
    L"MenuItemContainerStyleSelector",
    &GetReferenceTypeMember_MenuItemContainerStyleSelector<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_MenuItemContainerStyleSelector<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::StyleSelector>,
    25, // Microsoft.UI.Xaml.Controls.StyleSelector
    -1,
    false, true,  false,
    //  17 - Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle
    L"MenuItemContainerStyle",
    &GetReferenceTypeMember_MenuItemContainerStyle<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_MenuItemContainerStyle<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Style>,
    7, // Microsoft.UI.Xaml.Style
    -1,
    false, true,  false,
    //  18 - Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled
    L"IsTitleBarAutoPaddingEnabled",
    &GetValueTypeMember_IsTitleBarAutoPaddingEnabled<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    &SetValueTypeMember_IsTitleBarAutoPaddingEnabled<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  19 - Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible
    L"IsPaneToggleButtonVisible",
    &GetValueTypeMember_IsPaneToggleButtonVisible<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    &SetValueTypeMember_IsPaneToggleButtonVisible<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  20 - Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen
    L"IsPaneOpen",
    &GetValueTypeMember_IsPaneOpen<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    &SetValueTypeMember_IsPaneOpen<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  21 - Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate
    L"HeaderTemplate",
    &GetReferenceTypeMember_HeaderTemplate<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_HeaderTemplate<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::DataTemplate>,
    10, // Microsoft.UI.Xaml.DataTemplate
    -1,
    false, true,  false,
    //  22 - Microsoft.UI.Xaml.Controls.NavigationView.Header
    L"Header",
    &GetReferenceTypeMember_Header<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_Header<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //  23 - Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource
    L"FooterMenuItemsSource",
    &GetReferenceTypeMember_FooterMenuItemsSource<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_FooterMenuItemsSource<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //  24 - Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector
    L"MenuItemTemplateSelector",
    &GetReferenceTypeMember_MenuItemTemplateSelector<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_MenuItemTemplateSelector<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::DataTemplateSelector>,
    30, // Microsoft.UI.Xaml.Controls.DataTemplateSelector
    -1,
    false, true,  false,
    //  25 - Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth
    L"ExpandedModeThresholdWidth",
    &GetValueTypeMember_ExpandedModeThresholdWidth<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, double>,
    &SetValueTypeMember_ExpandedModeThresholdWidth<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, double>,
    2, // Double
    -1,
    false, true,  false,
    //  26 - Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate
    L"MenuItemTemplate",
    &GetReferenceTypeMember_MenuItemTemplate<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_MenuItemTemplate<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::DataTemplate>,
    10, // Microsoft.UI.Xaml.DataTemplate
    -1,
    false, true,  false,
    //  27 - Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength
    L"CompactPaneLength",
    &GetValueTypeMember_CompactPaneLength<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, double>,
    &SetValueTypeMember_CompactPaneLength<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, double>,
    2, // Double
    -1,
    false, true,  false,
    //  28 - Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth
    L"CompactModeThresholdWidth",
    &GetValueTypeMember_CompactModeThresholdWidth<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, double>,
    &SetValueTypeMember_CompactModeThresholdWidth<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, double>,
    2, // Double
    -1,
    false, true,  false,
    //  29 - Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox
    L"AutoSuggestBox",
    &GetReferenceTypeMember_AutoSuggestBox<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_AutoSuggestBox<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox>,
    28, // Microsoft.UI.Xaml.Controls.AutoSuggestBox
    -1,
    false, true,  false,
    //  30 - Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader
    L"AlwaysShowHeader",
    &GetValueTypeMember_AlwaysShowHeader<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    &SetValueTypeMember_AlwaysShowHeader<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  31 - Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode
    L"DisplayMode",
    &GetValueTypeMember_DisplayMode<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode>,
    nullptr,
    34, // Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode
    -1,
    true,  true,  false,
    //  32 - Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem
    L"SettingsItem",
    &GetReferenceTypeMember_SettingsItem<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    nullptr,
    1, // Object
    -1,
    true,  true,  false,
    //  33 - Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled
    L"ShoulderNavigationEnabled",
    &GetValueTypeMember_ShoulderNavigationEnabled<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>,
    &SetEnumMember_ShoulderNavigationEnabled<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>,
    40, // Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled
    -1,
    false, true,  false,
    //  34 - Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus
    L"SelectionFollowsFocus",
    &GetValueTypeMember_SelectionFollowsFocus<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>,
    &SetEnumMember_SelectionFollowsFocus<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>,
    39, // Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus
    -1,
    false, true,  false,
    //  35 - Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle
    L"PaneTitle",
    &GetReferenceTypeStringMember_PaneTitle<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeStringMember_PaneTitle<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::hstring>,
    3, // String
    -1,
    false, true,  false,
    //  36 - Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader
    L"PaneHeader",
    &GetReferenceTypeMember_PaneHeader<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_PaneHeader<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::UIElement>,
    9, // Microsoft.UI.Xaml.UIElement
    -1,
    false, true,  false,
    //  37 - Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent
    L"PaneCustomContent",
    &GetReferenceTypeMember_PaneCustomContent<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_PaneCustomContent<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::UIElement>,
    9, // Microsoft.UI.Xaml.UIElement
    -1,
    false, true,  false,
    //  38 - Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode
    L"OverflowLabelMode",
    &GetValueTypeMember_OverflowLabelMode<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode>,
    &SetEnumMember_OverflowLabelMode<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode>,
    37, // Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode
    -1,
    false, true,  false,
    //  39 - Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible
    L"IsPaneVisible",
    &GetValueTypeMember_IsPaneVisible<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    &SetValueTypeMember_IsPaneVisible<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  40 - Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled
    L"IsBackEnabled",
    &GetValueTypeMember_IsBackEnabled<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    &SetValueTypeMember_IsBackEnabled<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  41 - Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible
    L"IsBackButtonVisible",
    &GetValueTypeMember_IsBackButtonVisible<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible>,
    &SetEnumMember_IsBackButtonVisible<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible>,
    38, // Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
    -1,
    false, true,  false,
    //  42 - Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay
    L"ContentOverlay",
    &GetReferenceTypeMember_ContentOverlay<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    &SetReferenceTypeMember_ContentOverlay<::winrt::Microsoft::UI::Xaml::Controls::NavigationView, ::winrt::Microsoft::UI::Xaml::UIElement>,
    9, // Microsoft.UI.Xaml.UIElement
    -1,
    false, true,  false,
    //  43 - Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings
    L"TemplateSettings",
    &GetReferenceTypeMember_TemplateSettings<::winrt::Microsoft::UI::Xaml::Controls::NavigationView>,
    nullptr,
    36, // Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings
    -1,
    true,  true,  false,
    //  44 - Microsoft.UI.Xaml.Controls.NavigationViewItem.Icon
    L"Icon",
    &GetReferenceTypeMember_Icon<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem>,
    &SetReferenceTypeMember_Icon<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, ::winrt::Microsoft::UI::Xaml::Controls::IconElement>,
    24, // Microsoft.UI.Xaml.Controls.IconElement
    -1,
    false, true,  false,
    //  45 - Microsoft.UI.Xaml.Controls.NavigationViewItem.CompactPaneLength
    L"CompactPaneLength",
    &GetValueTypeMember_CompactPaneLength<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, double>,
    nullptr,
    2, // Double
    -1,
    true,  true,  false,
    //  46 - Microsoft.UI.Xaml.Controls.NavigationViewItem.SelectsOnInvoked
    L"SelectsOnInvoked",
    &GetValueTypeMember_SelectsOnInvoked<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, bool>,
    &SetValueTypeMember_SelectsOnInvoked<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  47 - Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItemsSource
    L"MenuItemsSource",
    &GetReferenceTypeMember_MenuItemsSource<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem>,
    &SetReferenceTypeMember_MenuItemsSource<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, ::winrt::Windows::Foundation::IInspectable>,
    1, // Object
    -1,
    false, true,  false,
    //  48 - Microsoft.UI.Xaml.Controls.NavigationViewItem.IsExpanded
    L"IsExpanded",
    &GetValueTypeMember_IsExpanded<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, bool>,
    &SetValueTypeMember_IsExpanded<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  49 - Microsoft.UI.Xaml.Controls.NavigationViewItem.IsChildSelected
    L"IsChildSelected",
    &GetValueTypeMember_IsChildSelected<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, bool>,
    &SetValueTypeMember_IsChildSelected<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  50 - Microsoft.UI.Xaml.Controls.NavigationViewItem.HasUnrealizedChildren
    L"HasUnrealizedChildren",
    &GetValueTypeMember_HasUnrealizedChildren<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, bool>,
    &SetValueTypeMember_HasUnrealizedChildren<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  51 - Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItems
    L"MenuItems",
    &GetReferenceTypeMember_MenuItems<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem>,
    nullptr,
    32, // Windows.Foundation.Collections.IVector`1<Object>
    -1,
    true,  true,  false,
    //  52 - Microsoft.UI.Xaml.Controls.NavigationViewItem.InfoBadge
    L"InfoBadge",
    &GetReferenceTypeMember_InfoBadge<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem>,
    &SetReferenceTypeMember_InfoBadge<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem, ::winrt::Microsoft::UI::Xaml::Controls::InfoBadge>,
    22, // Microsoft.UI.Xaml.Controls.InfoBadge
    -1,
    false, true,  false,
    //  53 - Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources
    L"UseCompactResources",
    &GetValueTypeMember_UseCompactResources<::winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources, bool>,
    &SetValueTypeMember_UseCompactResources<::winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources, bool>,
    4, // Boolean
    -1,
    false, true,  false,
    //  54 - Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected
    L"IsSelected",
    &GetValueTypeMember_IsSelected<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase, bool>,
    &SetValueTypeMember_IsSelected<::winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase, bool>,
    4, // Boolean
    -1,
    false, true,  false,
};

const wchar_t* GetShortName(const wchar_t* longName)
{
    const auto separator = wcsrchr(longName, '.');
    return separator ? separator + 1: longName;
}

const TypeInfo* GetTypeInfo(::winrt::hstring const& typeName)
{
    size_t typeNameLength = typeName.size();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        const auto begin = TypeInfos + TypeInfoLookup[typeNameLength];
        const auto end = TypeInfos + TypeInfoLookup[typeNameLength + 1];
        auto pos = std::find_if(begin, end, [&typeName](TypeInfo const& elem)
        {
            return wcscmp(typeName.data(), elem.typeName) == 0;
        });
        if (pos != end)
        {
            return pos;
        }
    }
    return nullptr;
}

const MemberInfo* GetMemberInfo(::winrt::hstring const& longMemberName)
{
    const auto dotPosition = std::find(longMemberName.crbegin(), longMemberName.crend(), L'.').base();
    if (dotPosition != longMemberName.end())
    {
        const auto sizeBeforeDot = static_cast<::winrt::hstring::size_type>(dotPosition - longMemberName.begin()) - 1;
        const TypeInfo* pTypeInfo = GetTypeInfo(::winrt::hstring{longMemberName.data(), sizeBeforeDot});
        if (pTypeInfo)
        {
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            const auto shortMemberName = GetShortName(longMemberName.data());
            const auto begin = MemberInfos + pTypeInfo->firstMemberIndex;
            const auto end = MemberInfos + pNextTypeInfo->firstMemberIndex;
            auto info = std::find_if(begin, end,
                [shortMemberName](const MemberInfo& elem)
            {
                return wcscmp(shortMemberName, elem.shortName) == 0;
            });
            if (info != end)
            {
                return info;
            }
        }
    }
    return nullptr;
}

std::vector<::winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProvider> const& XamlTypeInfoProvider::OtherProviders()
{
    std::lock_guard<std::recursive_mutex> lock(_xamlTypesCriticalSection);
    if (_otherProviders.empty())
    {
        _otherProviders.push_back(::winrt::Microsoft::UI::Xaml::XamlTypeInfo::XamlControlsXamlMetaDataProvider());
    }
    return _otherProviders;
}

IXamlType XamlTypeInfoProvider::CreateXamlType(::winrt::hstring const& typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (!pTypeInfo || !pNextTypeInfo)
    {
        return nullptr;
    }
    else if (pTypeInfo->flags & TypeInfo_Flags_IsSystemType)
    {
        return ::winrt::make<XamlSystemBaseType>(typeName);
    }
    else
    {
        ::winrt::hstring baseName { pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L""};
        ::winrt::hstring boxedName { pTypeInfo->boxedTypeIndex >= 0 ? TypeInfos[pTypeInfo->boxedTypeIndex].typeName : L""};
        auto userType = ::winrt::make_self<XamlUserType>(shared_from_this(), pTypeInfo->typeName, GetXamlTypeByName(baseName));
        userType->_kindOfType = pTypeInfo->kindOfType;
        userType->_activator = pTypeInfo->activator;
        userType->_collectionAdd = pTypeInfo->collectionAdd;
        userType->_dictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->_fromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName(pTypeInfo->contentPropertyName);
        userType->IsLocalType(pTypeInfo->flags & TypeInfo_Flags_IsLocalType);
        userType->IsReturnTypeStub(pTypeInfo->flags & TypeInfo_Flags_IsReturnTypeStub);
        userType->IsBindable(pTypeInfo->flags & TypeInfo_Flags_IsBindable);
        userType->IsMarkupExtension(pTypeInfo->flags & TypeInfo_Flags_IsMarkupExtension);
        userType->_createFromStringMethod = nullptr;
        userType->SetBoxedType(GetXamlTypeByName(boxedName));
        for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; ++i)
        {
            userType->AddMemberName(MemberInfos[i].shortName);
        }
        for (int i = pTypeInfo->firstEnumValueIndex; i < pNextTypeInfo->firstEnumValueIndex; ++i)
        {
            userType->AddEnumValue(EnumValues[i].name, winrt::Windows::Foundation::PropertyValue::CreateInt32(EnumValues[i].eValue));
        }
        return userType.as<IXamlType>();
    }
}

IXamlMember XamlTypeInfoProvider::CreateXamlMember(::winrt::hstring const& longMemberName)
{
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (!pMemberInfo)
    {
        return nullptr;
    }
    auto xamlMember = ::winrt::make_self<XamlMember>(shared_from_this(),
        pMemberInfo->shortName, TypeInfos[pMemberInfo->typeIndex].typeName);
    xamlMember->_getter = pMemberInfo->getter;
    xamlMember->_setter = pMemberInfo->setter;
    xamlMember->TargetTypeName(pMemberInfo->targetTypeIndex >= 0 ? TypeInfos[pMemberInfo->targetTypeIndex].typeName : L"");
    xamlMember->IsReadOnly(pMemberInfo->isReadOnly);
    xamlMember->IsDependencyProperty(pMemberInfo->isDependencyProperty);
    xamlMember->IsAttachable(pMemberInfo->isAttachable);

    return xamlMember.as<IXamlMember>();
}
} // namespace
