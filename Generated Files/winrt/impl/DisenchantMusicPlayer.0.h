// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220929.3

#pragma once
#ifndef WINRT_DisenchantMusicPlayer_0_H
#define WINRT_DisenchantMusicPlayer_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::DisenchantMusicPlayer
{
    struct IAlbumlistPage;
    struct IArtistlistPage;
    struct IMainWindow;
    struct IPlaylistsPage;
    struct ISettingsPage;
    struct ISonglistItem;
    struct ISonglistItemFactory;
    struct ISonglistPage;
    struct IStatisticPage;
    struct AlbumlistPage;
    struct ArtistlistPage;
    struct MainWindow;
    struct PlaylistsPage;
    struct SettingsPage;
    struct SonglistItem;
    struct SonglistPage;
    struct StatisticPage;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<winrt::DisenchantMusicPlayer::IAlbumlistPage>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::IArtistlistPage>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::IMainWindow>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::IPlaylistsPage>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::ISettingsPage>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::ISonglistItem>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::ISonglistItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::ISonglistPage>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::IStatisticPage>{ using type = interface_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::AlbumlistPage>{ using type = class_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::ArtistlistPage>{ using type = class_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::MainWindow>{ using type = class_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::PlaylistsPage>{ using type = class_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::SettingsPage>{ using type = class_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::SonglistItem>{ using type = class_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::SonglistPage>{ using type = class_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::StatisticPage>{ using type = class_category; };
    template <> struct category<winrt::DisenchantMusicPlayer::XamlMetaDataProvider>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::AlbumlistPage> = L"DisenchantMusicPlayer.AlbumlistPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::ArtistlistPage> = L"DisenchantMusicPlayer.ArtistlistPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::MainWindow> = L"DisenchantMusicPlayer.MainWindow";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::PlaylistsPage> = L"DisenchantMusicPlayer.PlaylistsPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::SettingsPage> = L"DisenchantMusicPlayer.SettingsPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::SonglistItem> = L"DisenchantMusicPlayer.SonglistItem";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::SonglistPage> = L"DisenchantMusicPlayer.SonglistPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::StatisticPage> = L"DisenchantMusicPlayer.StatisticPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::XamlMetaDataProvider> = L"DisenchantMusicPlayer.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::IAlbumlistPage> = L"DisenchantMusicPlayer.IAlbumlistPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::IArtistlistPage> = L"DisenchantMusicPlayer.IArtistlistPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::IMainWindow> = L"DisenchantMusicPlayer.IMainWindow";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::IPlaylistsPage> = L"DisenchantMusicPlayer.IPlaylistsPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::ISettingsPage> = L"DisenchantMusicPlayer.ISettingsPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::ISonglistItem> = L"DisenchantMusicPlayer.ISonglistItem";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::ISonglistItemFactory> = L"DisenchantMusicPlayer.ISonglistItemFactory";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::ISonglistPage> = L"DisenchantMusicPlayer.ISonglistPage";
    template <> inline constexpr auto& name_v<winrt::DisenchantMusicPlayer::IStatisticPage> = L"DisenchantMusicPlayer.IStatisticPage";
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::IAlbumlistPage>{ 0xB047ECAE,0x1BF3,0x57DC,{ 0xB2,0xF2,0x70,0x04,0xE9,0x7D,0x4F,0x18 } }; // B047ECAE-1BF3-57DC-B2F2-7004E97D4F18
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::IArtistlistPage>{ 0xD4CE5755,0x9733,0x5119,{ 0x86,0x9C,0xA4,0x81,0x73,0xC4,0x72,0xBA } }; // D4CE5755-9733-5119-869C-A48173C472BA
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::IMainWindow>{ 0xCB32272A,0x8E19,0x519B,{ 0x92,0xFB,0x02,0xA6,0x5E,0x8D,0x2E,0x80 } }; // CB32272A-8E19-519B-92FB-02A65E8D2E80
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::IPlaylistsPage>{ 0xC879D534,0xDCB8,0x5DFB,{ 0xB7,0xAF,0x69,0x02,0x76,0xEB,0x1C,0xD0 } }; // C879D534-DCB8-5DFB-B7AF-690276EB1CD0
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::ISettingsPage>{ 0x3CAEFEA3,0x3230,0x5E3E,{ 0xBD,0x60,0xA7,0x87,0xA1,0xDA,0x1D,0xB5 } }; // 3CAEFEA3-3230-5E3E-BD60-A787A1DA1DB5
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::ISonglistItem>{ 0x18F7F615,0xB357,0x5932,{ 0xA7,0x8F,0x2C,0x00,0x64,0xEF,0x46,0xFE } }; // 18F7F615-B357-5932-A78F-2C0064EF46FE
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::ISonglistItemFactory>{ 0xC0E20B15,0xAC22,0x54E5,{ 0xA1,0x2F,0xC4,0xF3,0x97,0xC4,0x5D,0xFB } }; // C0E20B15-AC22-54E5-A12F-C4F397C45DFB
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::ISonglistPage>{ 0xE352C079,0xFC6C,0x59D9,{ 0x88,0x36,0xED,0x81,0x75,0x63,0xCD,0xC0 } }; // E352C079-FC6C-59D9-8836-ED817563CDC0
    template <> inline constexpr guid guid_v<winrt::DisenchantMusicPlayer::IStatisticPage>{ 0xBF1EB298,0xE993,0x5FEA,{ 0x90,0xD4,0x4D,0x67,0x1A,0x11,0x2D,0x3C } }; // BF1EB298-E993-5FEA-90D4-4D671A112D3C
    template <> struct default_interface<winrt::DisenchantMusicPlayer::AlbumlistPage>{ using type = winrt::DisenchantMusicPlayer::IAlbumlistPage; };
    template <> struct default_interface<winrt::DisenchantMusicPlayer::ArtistlistPage>{ using type = winrt::DisenchantMusicPlayer::IArtistlistPage; };
    template <> struct default_interface<winrt::DisenchantMusicPlayer::MainWindow>{ using type = winrt::DisenchantMusicPlayer::IMainWindow; };
    template <> struct default_interface<winrt::DisenchantMusicPlayer::PlaylistsPage>{ using type = winrt::DisenchantMusicPlayer::IPlaylistsPage; };
    template <> struct default_interface<winrt::DisenchantMusicPlayer::SettingsPage>{ using type = winrt::DisenchantMusicPlayer::ISettingsPage; };
    template <> struct default_interface<winrt::DisenchantMusicPlayer::SonglistItem>{ using type = winrt::DisenchantMusicPlayer::ISonglistItem; };
    template <> struct default_interface<winrt::DisenchantMusicPlayer::SonglistPage>{ using type = winrt::DisenchantMusicPlayer::ISonglistPage; };
    template <> struct default_interface<winrt::DisenchantMusicPlayer::StatisticPage>{ using type = winrt::DisenchantMusicPlayer::IStatisticPage; };
    template <> struct default_interface<winrt::DisenchantMusicPlayer::XamlMetaDataProvider>{ using type = winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<winrt::DisenchantMusicPlayer::IAlbumlistPage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::DisenchantMusicPlayer::IArtistlistPage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::DisenchantMusicPlayer::IMainWindow>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::DisenchantMusicPlayer::IPlaylistsPage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::DisenchantMusicPlayer::ISettingsPage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::DisenchantMusicPlayer::ISonglistItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SongName(void**) noexcept = 0;
            virtual int32_t __stdcall put_SongName(void*) noexcept = 0;
            virtual int32_t __stdcall get_AlbumName(void**) noexcept = 0;
            virtual int32_t __stdcall put_AlbumName(void*) noexcept = 0;
            virtual int32_t __stdcall get_CoverPath(void**) noexcept = 0;
            virtual int32_t __stdcall put_CoverPath(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::DisenchantMusicPlayer::ISonglistItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::DisenchantMusicPlayer::ISonglistPage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::DisenchantMusicPlayer::IStatisticPage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_IAlbumlistPage
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::IAlbumlistPage>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_IAlbumlistPage<D>;
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_IArtistlistPage
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::IArtistlistPage>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_IArtistlistPage<D>;
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_IMainWindow
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::IMainWindow>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_IMainWindow<D>;
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_IPlaylistsPage
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::IPlaylistsPage>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_IPlaylistsPage<D>;
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_ISettingsPage
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::ISettingsPage>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_ISettingsPage<D>;
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_ISonglistItem
    {
        [[nodiscard]] auto SongName() const;
        auto SongName(param::hstring const& value) const;
        [[nodiscard]] auto AlbumName() const;
        auto AlbumName(param::hstring const& value) const;
        [[nodiscard]] auto CoverPath() const;
        auto CoverPath(param::hstring const& value) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::ISonglistItem>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_ISonglistItem<D>;
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_ISonglistItemFactory
    {
        auto CreateInstance(param::hstring const& songName, param::hstring const& albumName, param::hstring const& coverPath) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::ISonglistItemFactory>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_ISonglistItemFactory<D>;
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_ISonglistPage
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::ISonglistPage>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_ISonglistPage<D>;
    };
    template <typename D>
    struct consume_DisenchantMusicPlayer_IStatisticPage
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::DisenchantMusicPlayer::IStatisticPage>
    {
        template <typename D> using type = consume_DisenchantMusicPlayer_IStatisticPage<D>;
    };
}
#endif
