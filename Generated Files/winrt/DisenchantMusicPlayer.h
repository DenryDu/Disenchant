// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220929.3

#pragma once
#ifndef WINRT_DisenchantMusicPlayer_H
#define WINRT_DisenchantMusicPlayer_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220929.3"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220929.3"
#include "winrt/impl/Microsoft.UI.Composition.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.UI.Xaml.Data.2.h"
#include "winrt/impl/DisenchantMusicPlayer.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_DisenchantMusicPlayer_IAlbumlistPage<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IAlbumlistPage)->get_MyProperty(&value));
        return value;
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IAlbumlistPage<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IAlbumlistPage)->put_MyProperty(value));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IArtistlistPage<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IArtistlistPage)->get_MyProperty(&value));
        return value;
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IArtistlistPage<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IArtistlistPage)->put_MyProperty(value));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IMainWindow<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IMainWindow)->get_MyProperty(&value));
        return value;
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IMainWindow<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IMainWindow)->put_MyProperty(value));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IPlaylistsPage<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IPlaylistsPage)->get_MyProperty(&value));
        return value;
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IPlaylistsPage<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IPlaylistsPage)->put_MyProperty(value));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISettingsPage<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISettingsPage)->get_MyProperty(&value));
        return value;
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISettingsPage<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISettingsPage)->put_MyProperty(value));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistItem<D>::SongName() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistItem)->get_SongName(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistItem<D>::SongName(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistItem)->put_SongName(*(void**)(&value)));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistItem<D>::AlbumName() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistItem)->get_AlbumName(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistItem<D>::AlbumName(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistItem)->put_AlbumName(*(void**)(&value)));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistItem<D>::CoverPath() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistItem)->get_CoverPath(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistItem<D>::CoverPath(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistItem)->put_CoverPath(*(void**)(&value)));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistItemFactory<D>::CreateInstance(param::hstring const& songName, param::hstring const& albumName, param::hstring const& coverPath) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistItemFactory)->CreateInstance(*(void**)(&songName), *(void**)(&albumName), *(void**)(&coverPath), &value));
        return winrt::DisenchantMusicPlayer::SonglistItem{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistPage<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistPage)->get_MyProperty(&value));
        return value;
    }
    template <typename D> auto consume_DisenchantMusicPlayer_ISonglistPage<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::ISonglistPage)->put_MyProperty(value));
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IStatisticPage<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IStatisticPage)->get_MyProperty(&value));
        return value;
    }
    template <typename D> auto consume_DisenchantMusicPlayer_IStatisticPage<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::DisenchantMusicPlayer::IStatisticPage)->put_MyProperty(value));
    }
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::IAlbumlistPage> : produce_base<D, winrt::DisenchantMusicPlayer::IAlbumlistPage>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::IArtistlistPage> : produce_base<D, winrt::DisenchantMusicPlayer::IArtistlistPage>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::IMainWindow> : produce_base<D, winrt::DisenchantMusicPlayer::IMainWindow>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::IPlaylistsPage> : produce_base<D, winrt::DisenchantMusicPlayer::IPlaylistsPage>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::ISettingsPage> : produce_base<D, winrt::DisenchantMusicPlayer::ISettingsPage>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::ISonglistItem> : produce_base<D, winrt::DisenchantMusicPlayer::ISonglistItem>
    {
        int32_t __stdcall get_SongName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SongName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SongName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SongName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AlbumName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AlbumName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AlbumName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlbumName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CoverPath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CoverPath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CoverPath(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CoverPath(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::ISonglistItemFactory> : produce_base<D, winrt::DisenchantMusicPlayer::ISonglistItemFactory>
    {
        int32_t __stdcall CreateInstance(void* songName, void* albumName, void* coverPath, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::DisenchantMusicPlayer::SonglistItem>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&songName), *reinterpret_cast<hstring const*>(&albumName), *reinterpret_cast<hstring const*>(&coverPath)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::ISonglistPage> : produce_base<D, winrt::DisenchantMusicPlayer::ISonglistPage>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::DisenchantMusicPlayer::IStatisticPage> : produce_base<D, winrt::DisenchantMusicPlayer::IStatisticPage>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::DisenchantMusicPlayer
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::DisenchantMusicPlayer::IAlbumlistPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::IArtistlistPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::IMainWindow> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::IPlaylistsPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::ISettingsPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::ISonglistItem> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::ISonglistItemFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::ISonglistPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::IStatisticPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::AlbumlistPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::ArtistlistPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::MainWindow> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::PlaylistsPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::SettingsPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::SonglistItem> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::SonglistPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::StatisticPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::DisenchantMusicPlayer::XamlMetaDataProvider> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
