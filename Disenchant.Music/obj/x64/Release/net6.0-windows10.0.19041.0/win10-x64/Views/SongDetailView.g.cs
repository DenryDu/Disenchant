#pragma checksum "C:\Users\DenryDu\Documents\MyWork\WinUI3\Disenchant.Music\Disenchant.Music\Views\SongDetailView.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "C6B8746512A90CBF3058BAFE14157C85E8E88B0A82601132750E5F10031C0F23"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Disenchant.Music.Views
{
    partial class SongDetailView : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Image_Source(global::Microsoft.UI.Xaml.Controls.Image obj, global::Microsoft.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_FontSize(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.Double value)
            {
                obj.FontSize = value;
            }
            public static void Set_Microsoft_UI_Xaml_FrameworkElement_Margin(global::Microsoft.UI.Xaml.FrameworkElement obj, global::Microsoft.UI.Xaml.Thickness value)
            {
                obj.Margin = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Opacity(global::Microsoft.UI.Xaml.UIElement obj, global::System.Double value)
            {
                obj.Opacity = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SongDetailView_obj11_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ISongDetailView_Bindings
        {
            private global::Disenchant.Music.Models.LyricSlice dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj11;

            private SongDetailView_obj11_BindingsTracking bindingsTracking;

            public SongDetailView_obj11_Bindings()
            {
                this.bindingsTracking = new SongDetailView_obj11_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 11: // Views\SongDetailView.xaml line 130
                        this.obj11 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target));
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::Disenchant.Music.Models.LyricSlice>(item), 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // ISongDetailView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Disenchant.Music.Models.LyricSlice>(newDataRoot);
                    return true;
                }
                return false;
            }

            private bool TryGet_Time(out global::System.Double val)
            {
                global::Disenchant.Music.Models.LyricSlice obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj.Time;
                    return true;
                }
                else
                {
                    val = default(global::System.Double);
                    return false;
                }
            }

            private bool TryGet_(out global::Disenchant.Music.Models.LyricSlice val)
            {
                val = this.dataRoot;
                return true;
            }

            private bool TryGet_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyricIndex(out global::System.Int32 val)
            {
                global::Disenchant.Music.Models.MAudioPlayer obj;
                if (TryGet_Disenchant_Music_GlobalData_AudioPlayer(out obj) && obj != null)
                {
                    val = obj.CurrentLyricIndex;
                    return true;
                }
                else
                {
                    val = default(global::System.Int32);
                    return false;
                }
            }

            private bool TryGet_Disenchant_Music_GlobalData_AudioPlayer(out global::Disenchant.Music.Models.MAudioPlayer val)
            {
                val = global::Disenchant.Music.GlobalData.AudioPlayer;
                return true;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253(int phase)
            {
                global::System.Double p0;
                if (!TryGet_Time(out p0)) { return; }
                global::System.Int32 p1;
                if (!TryGet_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyricIndex(out p1)) { return; }
                global::System.Double result = global::Disenchant.Music.GlobalData.AudioPlayer.GetLyricFont(p0, p1);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailView.xaml line 130
                    if ((this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock) != null)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_FontSize((this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock), result);
                    }
                }
            }

            private void Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253(int phase)
            {
                global::System.Double p0;
                if (!TryGet_Time(out p0)) { return; }
                global::System.Int32 p1;
                if (!TryGet_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyricIndex(out p1)) { return; }
                global::Microsoft.UI.Xaml.Thickness result = global::Disenchant.Music.GlobalData.AudioPlayer.GetLyricMargin(p0, p1);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailView.xaml line 130
                    if ((this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock) != null)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_FrameworkElement_Margin((this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock), result);
                    }
                }
            }

            private void Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253(int phase)
            {
                global::System.Double p0;
                if (!TryGet_Time(out p0)) { return; }
                global::System.Int32 p1;
                if (!TryGet_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyricIndex(out p1)) { return; }
                global::System.Double result = global::Disenchant.Music.GlobalData.AudioPlayer.GetLyricOpacity(p0, p1);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailView.xaml line 130
                    if ((this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock) != null)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity((this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock), result);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Disenchant.Music.Models.LyricSlice obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Content(obj.Content, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Time(obj.Time, phase);
                    }
                }
                this.Update_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.GlobalData.AudioPlayer, phase);
                this.CompleteUpdate(phase);
            }
            private void Update_Content(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\SongDetailView.xaml line 130
                    if ((this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock) != null)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text((this.obj11.Target as global::Microsoft.UI.Xaml.Controls.TextBlock), obj, null);
                    }
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.Models.MAudioPlayer obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyricIndex(obj.CurrentLyricIndex, phase);
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253(phase);
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253(phase);
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253(phase);
                    }
                }
            }
            private void Update_Time(global::System.Double obj, int phase)
            {
                this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253(phase);
                this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253(phase);
                this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253(phase);
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyricIndex(global::System.Int32 obj, int phase)
            {
                this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253(phase);
                this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253(phase);
                this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253(phase);
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253"] = new InvokeFunctionDelegate(this.Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253); 
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253"] = new InvokeFunctionDelegate(this.Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253); 
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253"] = new InvokeFunctionDelegate(this.Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253); 
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SongDetailView_obj11_BindingsTracking
            {
                private global::System.WeakReference<SongDetailView_obj11_Bindings> weakRefToBindingObj; 

                public SongDetailView_obj11_BindingsTracking(SongDetailView_obj11_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SongDetailView_obj11_Bindings>(obj);
                }

                public SongDetailView_obj11_Bindings TryGetBindingObject()
                {
                    SongDetailView_obj11_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SongDetailView_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Models.LyricSlice obj = sender as global::Disenchant.Music.Models.LyricSlice;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Time(obj.Time, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Time":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Time(obj.Time, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void UpdateChildListeners_(global::Disenchant.Music.Models.LyricSlice obj)
                {
                    SongDetailView_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SongDetailView_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Models.MAudioPlayer obj = sender as global::Disenchant.Music.Models.MAudioPlayer;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyricIndex(obj.CurrentLyricIndex, DATA_CHANGED);
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253(DATA_CHANGED);
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253(DATA_CHANGED);
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253(DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CurrentLyricIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyricIndex(obj.CurrentLyricIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GetLyricFont":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricFont_2619523253(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GetLyricMargin":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricMargin_2619523253(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GetLyricOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_GetLyricOpacity_2619523253(DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Disenchant.Music.Models.MAudioPlayer cache_Disenchant_Music_GlobalData_AudioPlayer = null;
                public void UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.Models.MAudioPlayer obj)
                {
                    if (obj != cache_Disenchant_Music_GlobalData_AudioPlayer)
                    {
                        if (cache_Disenchant_Music_GlobalData_AudioPlayer != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Disenchant_Music_GlobalData_AudioPlayer).PropertyChanged -= PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer;
                            cache_Disenchant_Music_GlobalData_AudioPlayer = null;
                        }
                        if (obj != null)
                        {
                            cache_Disenchant_Music_GlobalData_AudioPlayer = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SongDetailView_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ISongDetailView_Bindings
        {
            private global::Disenchant.Music.Views.SongDetailView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.Button obj6;
            private global::Microsoft.UI.Xaml.Controls.ListView obj9;
            private global::Microsoft.UI.Xaml.Controls.Image obj12;

            // Fields for each event bindings event handler.
            private global::Microsoft.UI.Xaml.RoutedEventHandler obj6Click;

            private SongDetailView_obj1_BindingsTracking bindingsTracking;

            public SongDetailView_obj1_Bindings()
            {
                this.bindingsTracking = new SongDetailView_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Views\SongDetailView.xaml line 108
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        this.obj6Click = (global::System.Object p0, global::Microsoft.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            global::Disenchant.Music.GlobalData.AudioPlayer.CoverBtnClickToDetail(p0, p1);
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target)).Click += obj6Click;
                        break;
                    case 9: // Views\SongDetailView.xaml line 124
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        break;
                    case 12: // Views\SongDetailView.xaml line 114
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // ISongDetailView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Disenchant.Music.Views.SongDetailView>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Disenchant.Music.Views.SongDetailView obj, int phase)
            {
                this.Update_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.GlobalData.AudioPlayer, phase);
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.Models.MAudioPlayer obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(obj.CurrentLyric, phase);
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic(obj.CurrentMusic, phase);
                    }
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.LyricSlice> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailView.xaml line 124
                    XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj9, obj, null);
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic(global::Disenchant.Music.Models.MusicInfo obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic_Cover(obj.Cover, phase);
                    }
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic_Cover(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SongDetailView.xaml line 114
                    XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj12, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SongDetailView_obj1_BindingsTracking
            {
                private global::System.WeakReference<SongDetailView_obj1_Bindings> weakRefToBindingObj; 

                public SongDetailView_obj1_BindingsTracking(SongDetailView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SongDetailView_obj1_Bindings>(obj);
                }

                public SongDetailView_obj1_Bindings TryGetBindingObject()
                {
                    SongDetailView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(null);
                    UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(null);
                    UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic(null);
                }

                public void PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SongDetailView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Models.MAudioPlayer obj = sender as global::Disenchant.Music.Models.MAudioPlayer;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(obj.CurrentLyric, DATA_CHANGED);
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic(obj.CurrentMusic, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CurrentLyric":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(obj.CurrentLyric, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentMusic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic(obj.CurrentMusic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Disenchant.Music.Models.MAudioPlayer cache_Disenchant_Music_GlobalData_AudioPlayer = null;
                public void UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.Models.MAudioPlayer obj)
                {
                    if (obj != cache_Disenchant_Music_GlobalData_AudioPlayer)
                    {
                        if (cache_Disenchant_Music_GlobalData_AudioPlayer != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Disenchant_Music_GlobalData_AudioPlayer).PropertyChanged -= PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer;
                            cache_Disenchant_Music_GlobalData_AudioPlayer = null;
                        }
                        if (obj != null)
                        {
                            cache_Disenchant_Music_GlobalData_AudioPlayer = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer;
                        }
                    }
                }
                public void PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SongDetailView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.LyricSlice> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.LyricSlice>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SongDetailView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.LyricSlice> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.LyricSlice>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.LyricSlice> cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric = null;
                public void UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric(global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.LyricSlice> obj)
                {
                    if (obj != cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric)
                    {
                        if (cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric).PropertyChanged -= PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric).CollectionChanged -= CollectionChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric;
                            cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric = null;
                        }
                        if (obj != null)
                        {
                            cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentLyric;
                        }
                    }
                }
                public void PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SongDetailView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Models.MusicInfo obj = sender as global::Disenchant.Music.Models.MusicInfo;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic_Cover(obj.Cover, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Cover":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic_Cover(obj.Cover, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Disenchant.Music.Models.MusicInfo cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic = null;
                public void UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic(global::Disenchant.Music.Models.MusicInfo obj)
                {
                    if (obj != cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic)
                    {
                        if (cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic).PropertyChanged -= PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic;
                            cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic = null;
                        }
                        if (obj != null)
                        {
                            cache_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer_CurrentMusic;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\SongDetailView.xaml line 18
                {
                    this.VisualStateGroup = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.VisualStateGroup>(target);
                }
                break;
            case 3: // Views\SongDetailView.xaml line 19
                {
                    this.Narrow = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.VisualState>(target);
                }
                break;
            case 4: // Views\SongDetailView.xaml line 46
                {
                    this.Middle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.VisualState>(target);
                }
                break;
            case 5: // Views\SongDetailView.xaml line 69
                {
                    this.Wide = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.VisualState>(target);
                }
                break;
            case 7: // Views\SongDetailView.xaml line 113
                {
                    this.MusicCoverBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                }
                break;
            case 8: // Views\SongDetailView.xaml line 119
                {
                    this.LyricViewer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ScrollViewer>(target);
                }
                break;
            case 9: // Views\SongDetailView.xaml line 124
                {
                    this.LyricStackPanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                }
                break;
            case 11: // Views\SongDetailView.xaml line 130
                {
                    global::Microsoft.UI.Xaml.Controls.TextBlock element11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TextBlock)element11).SizeChanged += this.TextBlock_SizeChanged;
                }
                break;
            case 12: // Views\SongDetailView.xaml line 114
                {
                    this.MusicCover = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\SongDetailView.xaml line 4
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    SongDetailView_obj1_Bindings bindings = new SongDetailView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 11: // Views\SongDetailView.xaml line 130
                {                    
                    global::Microsoft.UI.Xaml.Controls.TextBlock element11 = (global::Microsoft.UI.Xaml.Controls.TextBlock)target;
                    SongDetailView_obj11_Bindings bindings = new SongDetailView_obj11_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element11.DataContext);
                    element11.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element11, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element11, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

