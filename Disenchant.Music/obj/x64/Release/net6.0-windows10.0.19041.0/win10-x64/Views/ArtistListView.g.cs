#pragma checksum "C:\Users\DenryDu\Documents\MyWork\WinUI3\Disenchant.Music\Disenchant.Music\Views\ArtistListView.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "5E1B7FCB5D3AF6552626F5853FF46AD50865347053277105BE5C37BAC906FCCD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Disenchant.Music.Views
{
    partial class ArtistListView : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Image_Source(global::Microsoft.UI.Xaml.Controls.Image obj, global::Microsoft.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ArtistListView_obj4_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IArtistListView_Bindings
        {
            private global::Disenchant.Music.Models.ArtistInfo dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;
            private global::Microsoft.UI.Xaml.Controls.Image obj7;

            private ArtistListView_obj4_BindingsTracking bindingsTracking;

            public ArtistListView_obj4_Bindings()
            {
                this.bindingsTracking = new ArtistListView_obj4_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // Views\ArtistListView.xaml line 22
                        this.obj4 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target));
                        break;
                    case 5: // Views\ArtistListView.xaml line 26
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 6: // Views\ArtistListView.xaml line 27
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 7: // Views\ArtistListView.xaml line 24
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj4.Target as global::Microsoft.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::Disenchant.Music.Models.ArtistInfo>(item), 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IArtistListView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Disenchant.Music.Models.ArtistInfo>(newDataRoot);
                    return true;
                }
                return false;
            }

            private bool TryGet_TotalNum(out global::System.Int32 val)
            {
                global::Disenchant.Music.Models.ArtistInfo obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj.TotalNum;
                    return true;
                }
                else
                {
                    val = default(global::System.Int32);
                    return false;
                }
            }

            private bool TryGet_(out global::Disenchant.Music.Models.ArtistInfo val)
            {
                val = this.dataRoot;
                return true;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_M_GetTotalNum_3044402276(int phase)
            {
                global::System.Int32 p0;
                if (!TryGet_TotalNum(out p0)) { return; }
                global::System.String result = this.dataRoot.GetTotalNum(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ArtistListView.xaml line 27
                    XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, result, null);
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Disenchant.Music.Models.ArtistInfo obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_TotalNum(obj.TotalNum, phase);
                        this.Update_M_GetTotalNum_3044402276(phase);
                        this.Update_Cover(obj.Cover, phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ArtistListView.xaml line 26
                    XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                }
            }
            private void Update_TotalNum(global::System.Int32 obj, int phase)
            {
                this.Update_M_GetTotalNum_3044402276(phase);
            }
            private void Update_M_GetTotalNum_3044402276(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["M_GetTotalNum_3044402276"] = new InvokeFunctionDelegate(this.Invoke_M_GetTotalNum_3044402276); 
                }
            }
            private void Update_Cover(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ArtistListView.xaml line 24
                    XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj7, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ArtistListView_obj4_BindingsTracking
            {
                private global::System.WeakReference<ArtistListView_obj4_Bindings> weakRefToBindingObj; 

                public ArtistListView_obj4_BindingsTracking(ArtistListView_obj4_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ArtistListView_obj4_Bindings>(obj);
                }

                public ArtistListView_obj4_Bindings TryGetBindingObject()
                {
                    ArtistListView_obj4_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistListView_obj4_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Models.ArtistInfo obj = sender as global::Disenchant.Music.Models.ArtistInfo;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_TotalNum(obj.TotalNum, DATA_CHANGED);
                                bindings.Update_M_GetTotalNum_3044402276(DATA_CHANGED);
                                bindings.Update_Cover(obj.Cover, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TotalNum":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TotalNum(obj.TotalNum, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Cover":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Cover(obj.Cover, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GetTotalNum":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_M_GetTotalNum_3044402276(DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void UpdateChildListeners_(global::Disenchant.Music.Models.ArtistInfo obj)
                {
                    ArtistListView_obj4_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ArtistListView_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IArtistListView_Bindings
        {
            private global::Disenchant.Music.Views.ArtistListView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.GridView obj2;

            private ArtistListView_obj1_BindingsTracking bindingsTracking;

            public ArtistListView_obj1_Bindings()
            {
                this.bindingsTracking = new ArtistListView_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\ArtistListView.xaml line 14
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.GridView>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IArtistListView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Disenchant.Music.Views.ArtistListView>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Disenchant.Music.Views.ArtistListView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update__artistListViewModel(obj._artistListViewModel, phase);
                    }
                }
            }
            private void Update__artistListViewModel(global::Disenchant.Music.ViewModels.ArtistListViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners__artistListViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update__artistListViewModel_ArtistList(obj.ArtistList, phase);
                    }
                }
            }
            private void Update__artistListViewModel_ArtistList(global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.ArtistInfo> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners__artistListViewModel_ArtistList(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ArtistListView.xaml line 14
                    XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj2, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ArtistListView_obj1_BindingsTracking
            {
                private global::System.WeakReference<ArtistListView_obj1_Bindings> weakRefToBindingObj; 

                public ArtistListView_obj1_BindingsTracking(ArtistListView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ArtistListView_obj1_Bindings>(obj);
                }

                public ArtistListView_obj1_Bindings TryGetBindingObject()
                {
                    ArtistListView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners__artistListViewModel(null);
                    UpdateChildListeners__artistListViewModel_ArtistList(null);
                }

                public void PropertyChanged__artistListViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistListView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.ViewModels.ArtistListViewModel obj = sender as global::Disenchant.Music.ViewModels.ArtistListViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update__artistListViewModel_ArtistList(obj.ArtistList, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ArtistList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__artistListViewModel_ArtistList(obj.ArtistList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Disenchant.Music.ViewModels.ArtistListViewModel cache__artistListViewModel = null;
                public void UpdateChildListeners__artistListViewModel(global::Disenchant.Music.ViewModels.ArtistListViewModel obj)
                {
                    if (obj != cache__artistListViewModel)
                    {
                        if (cache__artistListViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache__artistListViewModel).PropertyChanged -= PropertyChanged__artistListViewModel;
                            cache__artistListViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache__artistListViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged__artistListViewModel;
                        }
                    }
                }
                public void PropertyChanged__artistListViewModel_ArtistList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ArtistListView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.ArtistInfo> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.ArtistInfo>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged__artistListViewModel_ArtistList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ArtistListView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.ArtistInfo> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.ArtistInfo>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.ArtistInfo> cache__artistListViewModel_ArtistList = null;
                public void UpdateChildListeners__artistListViewModel_ArtistList(global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.ArtistInfo> obj)
                {
                    if (obj != cache__artistListViewModel_ArtistList)
                    {
                        if (cache__artistListViewModel_ArtistList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache__artistListViewModel_ArtistList).PropertyChanged -= PropertyChanged__artistListViewModel_ArtistList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache__artistListViewModel_ArtistList).CollectionChanged -= CollectionChanged__artistListViewModel_ArtistList;
                            cache__artistListViewModel_ArtistList = null;
                        }
                        if (obj != null)
                        {
                            cache__artistListViewModel_ArtistList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged__artistListViewModel_ArtistList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged__artistListViewModel_ArtistList;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\ArtistListView.xaml line 14
                {
                    this.ArtistsGridView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.GridView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.GridView)this.ArtistsGridView).ItemClick += this.ArtistsGridView_ItemClick;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\ArtistListView.xaml line 4
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    ArtistListView_obj1_Bindings bindings = new ArtistListView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 4: // Views\ArtistListView.xaml line 22
                {                    
                    global::Microsoft.UI.Xaml.Controls.StackPanel element4 = (global::Microsoft.UI.Xaml.Controls.StackPanel)target;
                    ArtistListView_obj4_Bindings bindings = new ArtistListView_obj4_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element4.DataContext);
                    element4.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element4, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element4, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

