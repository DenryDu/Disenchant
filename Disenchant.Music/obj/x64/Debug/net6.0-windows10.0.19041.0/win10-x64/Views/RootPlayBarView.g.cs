#pragma checksum "C:\Users\DenryDu\Documents\MyWork\WinUI3\Disenchant.Music\Disenchant.Music\Views\RootPlayBarView.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "FC090303275320BD5524053225DE07FEAAA25891A71035845CDFD0025C996C4F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Disenchant.Music.Views
{
    partial class RootPlayBarView : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(global::Microsoft.UI.Xaml.Controls.FontIcon obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Glyph = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Image_Source(global::Microsoft.UI.Xaml.Controls.Image obj, global::Microsoft.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Value(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Value = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class RootPlayBarView_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IRootPlayBarView_Bindings
        {
            private global::Disenchant.Music.Views.RootPlayBarView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.Button obj2;
            private global::Microsoft.UI.Xaml.Controls.FontIcon obj3;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj5;
            private global::Microsoft.UI.Xaml.Controls.Image obj6;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj7;
            private global::Microsoft.UI.Xaml.Controls.Slider obj8;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj9;

            // Fields for each event bindings event handler.
            private global::Microsoft.UI.Xaml.RoutedEventHandler obj2Click;
            private global::Microsoft.UI.Xaml.Input.PointerEventHandler obj8PointerReleased;
            private global::Microsoft.UI.Xaml.Input.PointerEventHandler obj8PointerPressed;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3GlyphDisabled = false;
            private static bool isobj4TextDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj6SourceDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj8ValueDisabled = false;
            private static bool isobj9TextDisabled = false;

            private RootPlayBarView_obj1_BindingsTracking bindingsTracking;

            public RootPlayBarView_obj1_Bindings()
            {
                this.bindingsTracking = new RootPlayBarView_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 86 && columnNumber == 45)
                {
                    this.obj2.Click -= obj2Click;
                }
                else if (lineNumber == 87 && columnNumber == 63)
                {
                    isobj3GlyphDisabled = true;
                }
                else if (lineNumber == 60 && columnNumber == 24)
                {
                    isobj4TextDisabled = true;
                }
                else if (lineNumber == 61 && columnNumber == 24)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 20)
                {
                    isobj6SourceDisabled = true;
                }
                else if (lineNumber == 39 && columnNumber == 28)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 42 && columnNumber == 21)
                {
                    isobj8ValueDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 21)
                {
                    this.obj8.PointerReleased -= obj8PointerReleased;
                }
                else if (lineNumber == 44 && columnNumber == 21)
                {
                    this.obj8.PointerPressed -= obj8PointerPressed;
                }
                else if (lineNumber == 46 && columnNumber == 21)
                {
                    isobj9TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\RootPlayBarView.xaml line 86
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        this.obj2Click = (global::System.Object p0, global::Microsoft.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.RootPlayBarViewModel.PlayButton_Click(p0, p1);
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target)).Click += obj2Click;
                        break;
                    case 3: // Views\RootPlayBarView.xaml line 87
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // Views\RootPlayBarView.xaml line 60
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // Views\RootPlayBarView.xaml line 61
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // Views\RootPlayBarView.xaml line 52
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    case 7: // Views\RootPlayBarView.xaml line 38
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 8: // Views\RootPlayBarView.xaml line 41
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                        this.obj8PointerReleased = (global::System.Object p0, global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs p1) =>
                        {
                            global::Disenchant.Music.GlobalData.AudioPlayer.ProgressUpdate(p0, p1);
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target)).PointerReleased += obj8PointerReleased;
                        this.obj8PointerPressed = (global::System.Object p0, global::Microsoft.UI.Xaml.Input.PointerRoutedEventArgs p1) =>
                        {
                            global::Disenchant.Music.GlobalData.AudioPlayer.ProgressLock(p0, p1);
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target)).PointerPressed += obj8PointerPressed;
                        break;
                    case 9: // Views\RootPlayBarView.xaml line 45
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IRootPlayBarView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Disenchant.Music.Views.RootPlayBarView>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            private bool TryGet_Disenchant_Music_GlobalData_AudioPlayer_Current(out global::System.TimeSpan val)
            {
                global::Disenchant.Music.Model.AudioPlayer obj;
                if (TryGet_Disenchant_Music_GlobalData_AudioPlayer(out obj) && obj != null)
                {
                    val = obj.Current;
                    return true;
                }
                else
                {
                    val = default(global::System.TimeSpan);
                    return false;
                }
            }

            private bool TryGet_Disenchant_Music_GlobalData_AudioPlayer(out global::Disenchant.Music.Model.AudioPlayer val)
            {
                val = global::Disenchant.Music.GlobalData.AudioPlayer;
                return true;
            }

            private bool TryGet_Disenchant_Music_GlobalData_AudioPlayer_Total(out global::System.TimeSpan val)
            {
                global::Disenchant.Music.Model.AudioPlayer obj;
                if (TryGet_Disenchant_Music_GlobalData_AudioPlayer(out obj) && obj != null)
                {
                    val = obj.Total;
                    return true;
                }
                else
                {
                    val = default(global::System.TimeSpan);
                    return false;
                }
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_3882043851(int phase)
            {
                global::System.TimeSpan p0;
                if (!TryGet_Disenchant_Music_GlobalData_AudioPlayer_Current(out p0)) { return; }
                global::System.String result = global::Disenchant.Music.GlobalData.AudioPlayer.TimeSpanConverter(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\RootPlayBarView.xaml line 38
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj7, result, null);
                    }
                }
            }

            private void Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_209755030(int phase)
            {
                global::System.TimeSpan p0;
                if (!TryGet_Disenchant_Music_GlobalData_AudioPlayer_Total(out p0)) { return; }
                global::System.String result = global::Disenchant.Music.GlobalData.AudioPlayer.TimeSpanConverter(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\RootPlayBarView.xaml line 45
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj9, result, null);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Disenchant.Music.Views.RootPlayBarView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_RootPlayBarViewModel(obj.RootPlayBarViewModel, phase);
                    }
                }
                this.Update_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.GlobalData.AudioPlayer, phase);
                this.CompleteUpdate(phase);
            }
            private void Update_RootPlayBarViewModel(global::Disenchant.Music.ViewModels.RootPlayBarViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_RootPlayBarViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_RootPlayBarViewModel_PlayBtnIcon(obj.PlayBtnIcon, phase);
                        this.Update_RootPlayBarViewModel_CurrentMusic(obj.CurrentMusic, phase);
                    }
                }
            }
            private void Update_RootPlayBarViewModel_PlayBtnIcon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\RootPlayBarView.xaml line 87
                    if (!isobj3GlyphDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_FontIcon_Glyph(this.obj3, obj, null);
                    }
                }
            }
            private void Update_RootPlayBarViewModel_CurrentMusic(global::Disenchant.Music.Models.MusicInfo obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_RootPlayBarViewModel_CurrentMusic(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_RootPlayBarViewModel_CurrentMusic_Title(obj.Title, phase);
                        this.Update_RootPlayBarViewModel_CurrentMusic_ArtistsAndAlbumStr(obj.ArtistsAndAlbumStr, phase);
                        this.Update_RootPlayBarViewModel_CurrentMusic_Cover(obj.Cover, phase);
                    }
                }
            }
            private void Update_RootPlayBarViewModel_CurrentMusic_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\RootPlayBarView.xaml line 60
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                }
            }
            private void Update_RootPlayBarViewModel_CurrentMusic_ArtistsAndAlbumStr(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\RootPlayBarView.xaml line 61
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                    }
                }
            }
            private void Update_RootPlayBarViewModel_CurrentMusic_Cover(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\RootPlayBarView.xaml line 52
                    if (!isobj6SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj6, obj, null);
                    }
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.Model.AudioPlayer obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_Current(obj.Current, phase);
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_3882043851(phase);
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentPosition(obj.CurrentPosition, phase);
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_Total(obj.Total, phase);
                        this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_209755030(phase);
                    }
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_Current(global::System.TimeSpan obj, int phase)
            {
                this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_3882043851(phase);
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_3882043851(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj7TextDisabled)
                    {
                        this.PendingFunctionBindings["Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_3882043851"] = new InvokeFunctionDelegate(this.Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_3882043851); 
                    }
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentPosition(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\RootPlayBarView.xaml line 41
                    if (!isobj8ValueDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj8, obj);
                    }
                }
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_Total(global::System.TimeSpan obj, int phase)
            {
                this.Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_209755030(phase);
            }
            private void Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_209755030(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj9TextDisabled)
                    {
                        this.PendingFunctionBindings["Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_209755030"] = new InvokeFunctionDelegate(this.Invoke_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_209755030); 
                    }
                }
            }
            private void UpdateTwoWay_3_Glyph()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.RootPlayBarViewModel != null)
                        {
                            this.dataRoot.RootPlayBarViewModel.PlayBtnIcon = this.obj3.Glyph;
                        }
                    }
                }
            }
            private void UpdateTwoWay_4_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.RootPlayBarViewModel != null)
                        {
                            if (this.dataRoot.RootPlayBarViewModel.CurrentMusic != null)
                            {
                                this.dataRoot.RootPlayBarViewModel.CurrentMusic.Title = this.obj4.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_5_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.RootPlayBarViewModel != null)
                        {
                            if (this.dataRoot.RootPlayBarViewModel.CurrentMusic != null)
                            {
                                this.dataRoot.RootPlayBarViewModel.CurrentMusic.ArtistsAndAlbumStr = this.obj5.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_6_Source()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.RootPlayBarViewModel != null)
                        {
                            if (this.dataRoot.RootPlayBarViewModel.CurrentMusic != null)
                            {
                                this.dataRoot.RootPlayBarViewModel.CurrentMusic.Cover = (global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage)this.obj6.Source;
                            }
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class RootPlayBarView_obj1_BindingsTracking
            {
                private global::System.WeakReference<RootPlayBarView_obj1_Bindings> weakRefToBindingObj; 

                public RootPlayBarView_obj1_BindingsTracking(RootPlayBarView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<RootPlayBarView_obj1_Bindings>(obj);
                }

                public RootPlayBarView_obj1_Bindings TryGetBindingObject()
                {
                    RootPlayBarView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_RootPlayBarViewModel(null);
                    UpdateChildListeners_RootPlayBarViewModel_CurrentMusic(null);
                    UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(null);
                }

                public void PropertyChanged_RootPlayBarViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    RootPlayBarView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.ViewModels.RootPlayBarViewModel obj = sender as global::Disenchant.Music.ViewModels.RootPlayBarViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_RootPlayBarViewModel_PlayBtnIcon(obj.PlayBtnIcon, DATA_CHANGED);
                                bindings.Update_RootPlayBarViewModel_CurrentMusic(obj.CurrentMusic, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "PlayBtnIcon":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_RootPlayBarViewModel_PlayBtnIcon(obj.PlayBtnIcon, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentMusic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_RootPlayBarViewModel_CurrentMusic(obj.CurrentMusic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Disenchant.Music.ViewModels.RootPlayBarViewModel cache_RootPlayBarViewModel = null;
                public void UpdateChildListeners_RootPlayBarViewModel(global::Disenchant.Music.ViewModels.RootPlayBarViewModel obj)
                {
                    if (obj != cache_RootPlayBarViewModel)
                    {
                        if (cache_RootPlayBarViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_RootPlayBarViewModel).PropertyChanged -= PropertyChanged_RootPlayBarViewModel;
                            cache_RootPlayBarViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_RootPlayBarViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_RootPlayBarViewModel;
                        }
                    }
                }
                public void PropertyChanged_RootPlayBarViewModel_CurrentMusic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    RootPlayBarView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Models.MusicInfo obj = sender as global::Disenchant.Music.Models.MusicInfo;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_RootPlayBarViewModel_CurrentMusic_Title(obj.Title, DATA_CHANGED);
                                bindings.Update_RootPlayBarViewModel_CurrentMusic_ArtistsAndAlbumStr(obj.ArtistsAndAlbumStr, DATA_CHANGED);
                                bindings.Update_RootPlayBarViewModel_CurrentMusic_Cover(obj.Cover, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_RootPlayBarViewModel_CurrentMusic_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ArtistsAndAlbumStr":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_RootPlayBarViewModel_CurrentMusic_ArtistsAndAlbumStr(obj.ArtistsAndAlbumStr, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Cover":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_RootPlayBarViewModel_CurrentMusic_Cover(obj.Cover, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Disenchant.Music.Models.MusicInfo cache_RootPlayBarViewModel_CurrentMusic = null;
                public void UpdateChildListeners_RootPlayBarViewModel_CurrentMusic(global::Disenchant.Music.Models.MusicInfo obj)
                {
                    if (obj != cache_RootPlayBarViewModel_CurrentMusic)
                    {
                        if (cache_RootPlayBarViewModel_CurrentMusic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_RootPlayBarViewModel_CurrentMusic).PropertyChanged -= PropertyChanged_RootPlayBarViewModel_CurrentMusic;
                            cache_RootPlayBarViewModel_CurrentMusic = null;
                        }
                        if (obj != null)
                        {
                            cache_RootPlayBarViewModel_CurrentMusic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_RootPlayBarViewModel_CurrentMusic;
                        }
                    }
                }
                public void PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    RootPlayBarView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Model.AudioPlayer obj = sender as global::Disenchant.Music.Model.AudioPlayer;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_Current(obj.Current, DATA_CHANGED);
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_3882043851(DATA_CHANGED);
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentPosition(obj.CurrentPosition, DATA_CHANGED);
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_Total(obj.Total, DATA_CHANGED);
                                bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_209755030(DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Current":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_Current(obj.Current, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentPosition":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_CurrentPosition(obj.CurrentPosition, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Total":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_Total(obj.Total, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TimeSpanConverter":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_3882043851(DATA_CHANGED);
                                        bindings.Update_Disenchant_Music_GlobalData_AudioPlayer_M_TimeSpanConverter_209755030(DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Disenchant.Music.Model.AudioPlayer cache_Disenchant_Music_GlobalData_AudioPlayer = null;
                public void UpdateChildListeners_Disenchant_Music_GlobalData_AudioPlayer(global::Disenchant.Music.Model.AudioPlayer obj)
                {
                    if (obj != cache_Disenchant_Music_GlobalData_AudioPlayer)
                    {
                        if (cache_Disenchant_Music_GlobalData_AudioPlayer != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Disenchant_Music_GlobalData_AudioPlayer).PropertyChanged -= PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer;
                            cache_Disenchant_Music_GlobalData_AudioPlayer = null;
                        }
                        if (obj != null)
                        {
                            cache_Disenchant_Music_GlobalData_AudioPlayer = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Disenchant_Music_GlobalData_AudioPlayer;
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::Microsoft.UI.Xaml.Controls.FontIcon sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.FontIcon.GlyphProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_Glyph();
                        }
                    });
                }
                public void RegisterTwoWayListener_4(global::Microsoft.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::Microsoft.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_6(global::Microsoft.UI.Xaml.Controls.Image sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Image.SourceProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_Source();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\RootPlayBarView.xaml line 86
                {
                    this.PlayButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 6: // Views\RootPlayBarView.xaml line 52
                {
                    this.ControllerCover = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                }
                break;
            case 8: // Views\RootPlayBarView.xaml line 41
                {
                    this.ProgressSlider = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\RootPlayBarView.xaml line 4
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    RootPlayBarView_obj1_Bindings bindings = new RootPlayBarView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

