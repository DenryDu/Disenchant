#pragma checksum "C:\Users\DenryDu\Documents\MyWork\WinUI3\Disenchant.Music\Disenchant.Music\Views\AlbumDetailView.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "18EDC0FDAD9C9BBF46B4E92B0C76D9A64B5CE6E05C761BA8DD76454BF4A755BC"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Disenchant.Music.Views
{
    partial class AlbumDetailView : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Image_Source(global::Microsoft.UI.Xaml.Controls.Image obj, global::Microsoft.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class AlbumDetailView_obj10_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IAlbumDetailView_Bindings
        {
            private global::Disenchant.Music.Models.MusicBriefInfo dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj10;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj10TextDisabled = false;

            private AlbumDetailView_obj10_BindingsTracking bindingsTracking;

            public AlbumDetailView_obj10_Bindings()
            {
                this.bindingsTracking = new AlbumDetailView_obj10_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 65 && columnNumber == 36)
                {
                    isobj10TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10: // Views\AlbumDetailView.xaml line 65
                        this.obj10 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target));
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj10.Target as global::Microsoft.UI.Xaml.Controls.TextBlock).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::Disenchant.Music.Models.MusicBriefInfo>(item), 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IAlbumDetailView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Disenchant.Music.Models.MusicBriefInfo>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Disenchant.Music.Models.MusicBriefInfo obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Title(obj.Title, phase);
                    }
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AlbumDetailView.xaml line 65
                    if (!isobj10TextDisabled)
                    {
                        if ((this.obj10.Target as global::Microsoft.UI.Xaml.Controls.TextBlock) != null)
                        {
                            XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text((this.obj10.Target as global::Microsoft.UI.Xaml.Controls.TextBlock), obj, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class AlbumDetailView_obj10_BindingsTracking
            {
                private global::System.WeakReference<AlbumDetailView_obj10_Bindings> weakRefToBindingObj; 

                public AlbumDetailView_obj10_BindingsTracking(AlbumDetailView_obj10_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<AlbumDetailView_obj10_Bindings>(obj);
                }

                public AlbumDetailView_obj10_Bindings TryGetBindingObject()
                {
                    AlbumDetailView_obj10_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AlbumDetailView_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Models.MusicBriefInfo obj = sender as global::Disenchant.Music.Models.MusicBriefInfo;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Title(obj.Title, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Disenchant.Music.Models.MusicBriefInfo obj)
                {
                    AlbumDetailView_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class AlbumDetailView_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IAlbumDetailView_Bindings
        {
            private global::Disenchant.Music.Views.AlbumDetailView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj3;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj7;
            private global::Microsoft.UI.Xaml.Controls.ListView obj8;
            private global::Microsoft.UI.Xaml.Controls.Image obj11;

            // Fields for each event bindings event handler.
            private global::Microsoft.UI.Xaml.Controls.ItemClickEventHandler obj8ItemClick;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3TextDisabled = false;
            private static bool isobj4TextDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj8ItemsSourceDisabled = false;
            private static bool isobj11SourceDisabled = false;

            private AlbumDetailView_obj1_BindingsTracking bindingsTracking;

            public AlbumDetailView_obj1_Bindings()
            {
                this.bindingsTracking = new AlbumDetailView_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 38 && columnNumber == 96)
                {
                    isobj3TextDisabled = true;
                }
                else if (lineNumber == 39 && columnNumber == 93)
                {
                    isobj4TextDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 20)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 20)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 20)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 58 && columnNumber == 15)
                {
                    isobj8ItemsSourceDisabled = true;
                }
                else if (lineNumber == 60 && columnNumber == 15)
                {
                    this.obj8.ItemClick -= obj8ItemClick;
                }
                else if (lineNumber == 36 && columnNumber == 20)
                {
                    isobj11SourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\AlbumDetailView.xaml line 38
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 4: // Views\AlbumDetailView.xaml line 39
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 5: // Views\AlbumDetailView.xaml line 42
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 6: // Views\AlbumDetailView.xaml line 47
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 7: // Views\AlbumDetailView.xaml line 52
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 8: // Views\AlbumDetailView.xaml line 57
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        this.obj8ItemClick = (global::System.Object p0, global::Microsoft.UI.Xaml.Controls.ItemClickEventArgs p1) =>
                        {
                            this.dataRoot._albumDetailViewModel.Songlist_ItemClick(p0, p1);
                        };
                        (global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target)).ItemClick += obj8ItemClick;
                        break;
                    case 11: // Views\AlbumDetailView.xaml line 35
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IAlbumDetailView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Disenchant.Music.Views.AlbumDetailView>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            private bool TryGet__albumDetailViewModel_AlbumInfo_TotalDuration(out global::System.TimeSpan val)
            {
                global::Disenchant.Music.Models.AlbumInfo obj;
                if (TryGet__albumDetailViewModel_AlbumInfo(out obj) && obj != null)
                {
                    val = obj.TotalDuration;
                    return true;
                }
                else
                {
                    val = default(global::System.TimeSpan);
                    return false;
                }
            }

            private bool TryGet__albumDetailViewModel_AlbumInfo(out global::Disenchant.Music.Models.AlbumInfo val)
            {
                global::Disenchant.Music.ViewModels.AlbumDetailViewModel obj;
                if (TryGet__albumDetailViewModel(out obj) && obj != null)
                {
                    val = obj.AlbumInfo;
                    return true;
                }
                else
                {
                    val = default(global::Disenchant.Music.Models.AlbumInfo);
                    return false;
                }
            }

            private bool TryGet__albumDetailViewModel(out global::Disenchant.Music.ViewModels.AlbumDetailViewModel val)
            {
                global::Disenchant.Music.Views.AlbumDetailView obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj._albumDetailViewModel;
                    return true;
                }
                else
                {
                    val = default(global::Disenchant.Music.ViewModels.AlbumDetailViewModel);
                    return false;
                }
            }

            private bool TryGet_(out global::Disenchant.Music.Views.AlbumDetailView val)
            {
                val = this.dataRoot;
                return true;
            }

            private bool TryGet__albumDetailViewModel_AlbumInfo_Year(out global::System.UInt32 val)
            {
                global::Disenchant.Music.Models.AlbumInfo obj;
                if (TryGet__albumDetailViewModel_AlbumInfo(out obj) && obj != null)
                {
                    val = obj.Year;
                    return true;
                }
                else
                {
                    val = default(global::System.UInt32);
                    return false;
                }
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke__albumDetailViewModel_M_TimeSpanConverter_2804380614(int phase)
            {
                global::System.TimeSpan p0;
                if (!TryGet__albumDetailViewModel_AlbumInfo_TotalDuration(out p0)) { return; }
                global::System.String result = this.dataRoot._albumDetailViewModel.TimeSpanConverter(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AlbumDetailView.xaml line 47
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, result, null);
                    }
                }
            }

            private void Invoke__albumDetailViewModel_M_YearConverter_1259764457(int phase)
            {
                global::System.UInt32 p0;
                if (!TryGet__albumDetailViewModel_AlbumInfo_Year(out p0)) { return; }
                global::System.String result = this.dataRoot._albumDetailViewModel.YearConverter(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AlbumDetailView.xaml line 52
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj7, result, null);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Disenchant.Music.Views.AlbumDetailView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update__albumDetailViewModel(obj._albumDetailViewModel, phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update__albumDetailViewModel(global::Disenchant.Music.ViewModels.AlbumDetailViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners__albumDetailViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update__albumDetailViewModel_AlbumInfo(obj.AlbumInfo, phase);
                        this.Update__albumDetailViewModel_M_TimeSpanConverter_2804380614(phase);
                        this.Update__albumDetailViewModel_M_YearConverter_1259764457(phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update__albumDetailViewModel_MusicBriefs(obj.MusicBriefs, phase);
                    }
                }
            }
            private void Update__albumDetailViewModel_AlbumInfo(global::Disenchant.Music.Models.AlbumInfo obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners__albumDetailViewModel_AlbumInfo(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update__albumDetailViewModel_AlbumInfo_Name(obj.Name, phase);
                        this.Update__albumDetailViewModel_AlbumInfo_Artist(obj.Artist, phase);
                        this.Update__albumDetailViewModel_AlbumInfo_TotalNum(obj.TotalNum, phase);
                        this.Update__albumDetailViewModel_AlbumInfo_TotalDuration(obj.TotalDuration, phase);
                        this.Update__albumDetailViewModel_AlbumInfo_Year(obj.Year, phase);
                        this.Update__albumDetailViewModel_AlbumInfo_Cover(obj.Cover, phase);
                    }
                }
            }
            private void Update__albumDetailViewModel_AlbumInfo_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AlbumDetailView.xaml line 38
                    if (!isobj3TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj3, obj, null);
                    }
                }
            }
            private void Update__albumDetailViewModel_AlbumInfo_Artist(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AlbumDetailView.xaml line 39
                    if (!isobj4TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                    }
                }
            }
            private void Update__albumDetailViewModel_AlbumInfo_TotalNum(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AlbumDetailView.xaml line 42
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj.ToString(), null);
                    }
                }
            }
            private void Update__albumDetailViewModel_AlbumInfo_TotalDuration(global::System.TimeSpan obj, int phase)
            {
                this.Update__albumDetailViewModel_M_TimeSpanConverter_2804380614(phase);
            }
            private void Update__albumDetailViewModel_M_TimeSpanConverter_2804380614(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj6TextDisabled)
                    {
                        this.PendingFunctionBindings["_albumDetailViewModel_M_TimeSpanConverter_2804380614"] = new InvokeFunctionDelegate(this.Invoke__albumDetailViewModel_M_TimeSpanConverter_2804380614); 
                    }
                }
            }
            private void Update__albumDetailViewModel_AlbumInfo_Year(global::System.UInt32 obj, int phase)
            {
                this.Update__albumDetailViewModel_M_YearConverter_1259764457(phase);
            }
            private void Update__albumDetailViewModel_M_YearConverter_1259764457(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj7TextDisabled)
                    {
                        this.PendingFunctionBindings["_albumDetailViewModel_M_YearConverter_1259764457"] = new InvokeFunctionDelegate(this.Invoke__albumDetailViewModel_M_YearConverter_1259764457); 
                    }
                }
            }
            private void Update__albumDetailViewModel_MusicBriefs(global::System.Collections.ObjectModel.ObservableCollection<global::Disenchant.Music.Models.MusicBriefInfo> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\AlbumDetailView.xaml line 57
                    if (!isobj8ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj8, obj, null);
                    }
                }
            }
            private void Update__albumDetailViewModel_AlbumInfo_Cover(global::Microsoft.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\AlbumDetailView.xaml line 35
                    if (!isobj11SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj11, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class AlbumDetailView_obj1_BindingsTracking
            {
                private global::System.WeakReference<AlbumDetailView_obj1_Bindings> weakRefToBindingObj; 

                public AlbumDetailView_obj1_BindingsTracking(AlbumDetailView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<AlbumDetailView_obj1_Bindings>(obj);
                }

                public AlbumDetailView_obj1_Bindings TryGetBindingObject()
                {
                    AlbumDetailView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners__albumDetailViewModel(null);
                    UpdateChildListeners__albumDetailViewModel_AlbumInfo(null);
                }

                public void PropertyChanged__albumDetailViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AlbumDetailView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.ViewModels.AlbumDetailViewModel obj = sender as global::Disenchant.Music.ViewModels.AlbumDetailViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update__albumDetailViewModel_AlbumInfo(obj.AlbumInfo, DATA_CHANGED);
                                bindings.Update__albumDetailViewModel_M_TimeSpanConverter_2804380614(DATA_CHANGED);
                                bindings.Update__albumDetailViewModel_M_YearConverter_1259764457(DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "AlbumInfo":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_AlbumInfo(obj.AlbumInfo, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TimeSpanConverter":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_M_TimeSpanConverter_2804380614(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YearConverter":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_M_YearConverter_1259764457(DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Disenchant.Music.ViewModels.AlbumDetailViewModel cache__albumDetailViewModel = null;
                public void UpdateChildListeners__albumDetailViewModel(global::Disenchant.Music.ViewModels.AlbumDetailViewModel obj)
                {
                    if (obj != cache__albumDetailViewModel)
                    {
                        if (cache__albumDetailViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache__albumDetailViewModel).PropertyChanged -= PropertyChanged__albumDetailViewModel;
                            cache__albumDetailViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache__albumDetailViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged__albumDetailViewModel;
                        }
                    }
                }
                public void PropertyChanged__albumDetailViewModel_AlbumInfo(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AlbumDetailView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Disenchant.Music.Models.AlbumInfo obj = sender as global::Disenchant.Music.Models.AlbumInfo;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update__albumDetailViewModel_AlbumInfo_Name(obj.Name, DATA_CHANGED);
                                bindings.Update__albumDetailViewModel_AlbumInfo_Artist(obj.Artist, DATA_CHANGED);
                                bindings.Update__albumDetailViewModel_AlbumInfo_TotalNum(obj.TotalNum, DATA_CHANGED);
                                bindings.Update__albumDetailViewModel_AlbumInfo_TotalDuration(obj.TotalDuration, DATA_CHANGED);
                                bindings.Update__albumDetailViewModel_AlbumInfo_Year(obj.Year, DATA_CHANGED);
                                bindings.Update__albumDetailViewModel_AlbumInfo_Cover(obj.Cover, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_AlbumInfo_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Artist":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_AlbumInfo_Artist(obj.Artist, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TotalNum":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_AlbumInfo_TotalNum(obj.TotalNum, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TotalDuration":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_AlbumInfo_TotalDuration(obj.TotalDuration, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Year":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_AlbumInfo_Year(obj.Year, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Cover":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update__albumDetailViewModel_AlbumInfo_Cover(obj.Cover, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Disenchant.Music.Models.AlbumInfo cache__albumDetailViewModel_AlbumInfo = null;
                public void UpdateChildListeners__albumDetailViewModel_AlbumInfo(global::Disenchant.Music.Models.AlbumInfo obj)
                {
                    if (obj != cache__albumDetailViewModel_AlbumInfo)
                    {
                        if (cache__albumDetailViewModel_AlbumInfo != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache__albumDetailViewModel_AlbumInfo).PropertyChanged -= PropertyChanged__albumDetailViewModel_AlbumInfo;
                            cache__albumDetailViewModel_AlbumInfo = null;
                        }
                        if (obj != null)
                        {
                            cache__albumDetailViewModel_AlbumInfo = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged__albumDetailViewModel_AlbumInfo;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\AlbumDetailView.xaml line 31
                {
                    global::Microsoft.UI.Xaml.Controls.Button element2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element2).Click += this.GoBackBtn_Click;
                }
                break;
            case 11: // Views\AlbumDetailView.xaml line 35
                {
                    this.AlbumCover = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\AlbumDetailView.xaml line 4
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    AlbumDetailView_obj1_Bindings bindings = new AlbumDetailView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 10: // Views\AlbumDetailView.xaml line 65
                {                    
                    global::Microsoft.UI.Xaml.Controls.TextBlock element10 = (global::Microsoft.UI.Xaml.Controls.TextBlock)target;
                    AlbumDetailView_obj10_Bindings bindings = new AlbumDetailView_obj10_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element10.DataContext);
                    element10.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element10, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element10, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

